<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Research.Naiad</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Research.Naiad.Dataflow.SendChannel`2">
            <summary>
            Represents the recipient of a <see cref="T:Microsoft.Research.Naiad.Dataflow.Message`2"/>
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.SendChannel`2.Send(Microsoft.Research.Naiad.Dataflow.Message{`0,`1})">
            <summary>
            Inserts the given <paramref name="message"/>into the channel.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.SendChannel`2.Flush">
            <summary>
            Flushes any buffered messages to the receiver.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.CentralizedProgressChannel.#ctor(Microsoft.Research.Naiad.Dataflow.Stage{Microsoft.Research.Naiad.Runtime.Progress.ProgressUpdateCentralizer,Microsoft.Research.Naiad.Dataflow.Empty},Microsoft.Research.Naiad.Dataflow.StageOutput{Microsoft.Research.Naiad.Runtime.Progress.Update,Microsoft.Research.Naiad.Dataflow.Empty},Microsoft.Research.Naiad.Dataflow.StageInput{Microsoft.Research.Naiad.Runtime.Progress.Update,Microsoft.Research.Naiad.Dataflow.Empty},Microsoft.Research.Naiad.InternalController,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.BufferPage">
            <summary>
            Fixed-size and reference-counted array of bytes.  
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.BufferPage.refCount">
            <summary>
            Initially 1 on construction. Incremented for each flushed segment. Decremented when the segment is Disposed().
            
            N.B. The user of this page must call Release() after use.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.SendBufferPage">
            <summary>
            BufferPage used for holding Messages.  Associated with a single SuperMessageSender.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SendBufferPage.consumerPointer">
            <summary>
            Represents the index up to which the consumer HAS READ from this buffer.
            
            Invariant: consumerPointer \leq validPointer \leq producerPointer.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SendBufferPage.validPointer">
            <summary>
            Represents the index up to which the consumer MAY READ from this buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SendBufferPage.producerPointer">
            <summary>
            Represents the index at which the producer WILL WRITE the next datum.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SendBufferPage.currentMessageHeaderOffset">
            <summary>
            Offset in the buffer at which the header of the current message should be patched in.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SendBufferPage.reservedPointer">
            <summary>
            Pointer to a location in the message that will be reserved for a later write (e.g. a count after elements
            are written).
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SendBufferPage.reservedLength">
            <summary>
            Number of bytes reserved by last call to ReserveBytes() (for sanity checking).
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.RecvBufferSheaf">
            <summary>
            A managed collection of RecvBufferPage objects, used to provide buffers for receiving/reading
            serialized messages.
            
            Each page can be in one or more states:
            * Empty -- the page contains no serialized data.
            * In use -- the page has been passed to a producer (i.e. a read or recv operation).
            * Partially produced -- the page contains serialized data that has been written into the page, but more space is available.
            * Partially produced/consumed -- same as partially produced, except that the consumer has started to read from the page(?).
            * Partially consumed -- the page contains serialized data that has been written into the page and not yet consumed. No more space is available for writing.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.RecvBufferSheaf.OnBytesProduced(System.Int32)">
            <summary>
            Called when the previous recv/read operation completes.
            </summary>
            <param name="bytesProduced">The number of bytes that were produced by the completed operation.</param>
            <returns>A list of pages containing new data.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.RecvBufferSheaf.ConsumeMessages">
            <summary>
            Returns a collection of messages that have been produced but not yet consumed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.RecvBufferSheaf.OnAllConsumed(Microsoft.Research.Naiad.Serialization.RecvBufferPage)">
            <summary>
            Called when all messages from a single page have been released.
            
            The given page will transition from partially-consumed to empty.
            </summary>
            <param name="page"></param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.BufferSegment">
            <summary>
            Identifies a contiguous region of a BufferPage.  A BufferSegment is the serialized representation of one or more Messages.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.SerializedMessageType">
            <summary>
            Represents the type of payload in a serialized message.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Data">
            <summary>
            The message contains data or progress information.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Shutdown">
            <summary>
            The message indicates successful termination of the sending process.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Checkpoint">
            <summary>
            The message indicates that the sending process is initiating a checkpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.CheckpointData">
            <summary>
            The message contains data the is being written as part of a checkpoint.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Startup">
            <summary>
            The message indicates that a new computation is starting up.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Failure">
            <summary>
            The message indicates that a computation has failed.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Ack">
            <summary>
            The message indicates the range of sequence numbers that have been received by the sender.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.MessageHeader">
            <summary>
            Represents the header of a serialized message.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.MessageHeader.ChannelID">
            <summary>
            The ID of the logical dataflow edge on which the message is being sent.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.MessageHeader.DestVertexID">
            <summary>
            The ID of the destination vertex.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.MessageHeader.FromVertexID">
            <summary>
            The ID of the sending vertex.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.MessageHeader.Length">
            <summary>
            The number of bytes in the payload. Only messages with type <see cref="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Data"/>
            or <see cref="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.CheckpointData"/> have length greater than zero.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.MessageHeader.SequenceNumber">
            <summary>
            A sequence number for the connection between the sending and receiving process.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.MessageHeader.Type">
            <summary>
            The type of the message. Only messages with type <see cref="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.Data"/>
            or <see cref="F:Microsoft.Research.Naiad.Serialization.SerializedMessageType.CheckpointData"/> have a payload.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.MessageHeader.Serialization">
            <summary>
            Get the Naiad serializer for the message header
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.CustomSerialization`1">
            <summary>
            Encapsulates the custom code for serializing and deserializing objects of
            type <typeparamref name="TElement"/>.
            </summary>
            <remarks>Implementations of this interface should have a no-argument constructor,
            because the serialization code generator will attempt to instantiate serializers using the no-argument
            constructor. A type constraint on <see cref="M:Microsoft.Research.Naiad.Serialization.SerializationFormat.RegisterCustomSerialization``2"/>
            ensures that this is the case for all registered serializers.</remarks>
            <example>
            public unsafe class IntSerializer : CustomSerialization&lt;int&gt;
            {
                public unsafe int TrySerialize(int value, byte* buffer, int limit)
                {
                    if (limit &lt; 4)
                        return -1;
                    *(int*)buffer = value;
                    return 4;
                }
                
                public unsafe int Deserialize(out int value, byte* buffer, int limit)
                {
                    value = *(int*)buffer;
                    return 4;
                }
            }
            
            // Generated serialization code:
            byte* currentPosition = ...;
            int bytesRemaining = ...;
            int toSerialize = ...;
            
            IntSerializer serializer = new IntSerializer();
            int bytesWritten = serializer.TrySerialize(value, currentPosition, bytesRemaining);
            if (bytesWritten &lt;= 0)
                return false;
            else
                currentPosition += bytesWritten;
            
            // Generated deserialization code:
            byte* currentPosition = ...;
            int bytesRemaining = ...;
            int toDeserialize;
            
            IntSerializer deserializer = new IntSerializer();
            int bytesRead = deserializer.Deserialize(out toDeserialize, currentPosition, bytesRemaining);
            currentPosition += bytesRead;
            bytesRemaining -= bytesRead;
            </example>
            <typeparam name="TElement">The type of element to be serialized or deserialized.</typeparam>
            <seealso cref="M:Microsoft.Research.Naiad.Serialization.SerializationFormat.RegisterCustomSerialization``2"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CustomSerialization`1.TrySerialize(`0,System.Byte*,System.Int32)">
            <summary>
            Attempts to serialize the given <paramref name="value"/> into the given
            <paramref name="buffer"/> with <paramref name="limit"/> bytes remaining.
            </summary>
            <param name="value">The value to be serialized.</param>
            <param name="buffer">The target buffer.</param>
            <param name="limit">The number of bytes remaining in <paramref name="buffer"/>.</param>
            <returns>If serialization was successful, returns the number of bytes written.
            If serialization was unsuccessful, returns a value less than or equal to 0.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CustomSerialization`1.Deserialize(`0@,System.Byte*,System.Int32)">
            <summary>
            Deserializes into <paramref name="value"/> the next element from the given
            <paramref name="buffer"/>.
            </summary>
            <param name="value">Will be set to the deserialized value.</param>
            <param name="buffer">The source buffer.</param>
            <param name="limit">The number of bytes remaining in <paramref name="buffer"/>.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.IFlushable">
            <summary>
            Denotes a serializer type that can be flushed
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.IFlushable.Flush">
            <summary>
            Flush any partially-written output
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.SerializedMessage">
            <summary>
            Represents a serialized message, containing a <see cref="T:Microsoft.Research.Naiad.Serialization.MessageHeader"/> and an optional payload.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SerializedMessage.Body">
            <summary>
            The buffer containing the payload of this message.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SerializedMessage.Dispose">
            <summary>
            Frees all bmemory associated with this message.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.NaiadWriter">
            <summary>
            Writes data in the Naiad message format to a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter.#ctor(System.IO.Stream,Microsoft.Research.Naiad.Serialization.SerializationFormat)">
            <summary>
            Constructs a new writer targeting the given stream, and using the given serialization format.
            </summary>
            <param name="stream">The stream to which data will be written.</param>
            <param name="serializationFormat">The serialization format to use.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter.Write``1(``0)">
            <summary>
            Writes the given element to the stream.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="element">The element to be written.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter.Write``1(``0,Microsoft.Research.Naiad.Serialization.NaiadSerialization{``0})">
            <summary>
            Writes the given element to the stream, using a specific serializer.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="element">The element to be written.</param>
            <param name="serializer">The serializer to be used.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter.Flush">
            <summary>
            Flushes any unwritten data to the underlying stream
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter.Dispose">
            <summary>
            Frees all resources associated with this writer.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.NaiadReader">
            <summary>
            Reads data written in the Naiad message format from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader.#ctor(System.IO.Stream,Microsoft.Research.Naiad.Serialization.SerializationFormat)">
            <summary>
            Constructs a new NaiadReader that consumes data from the given stream and uses the given
            serialization format.
            </summary>
            <param name="stream">The stream from which data will be read.</param>
            <param name="serializationFormat">The serialization format to use.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader.Read``1">
            <summary>
            Reads an element from the stream.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <returns>The element.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader.TryRead``1(Microsoft.Research.Naiad.Serialization.NaiadSerialization{``0},``0@)">
            <summary>
            Tries to read an element from the stream.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="deserializer">The deserializer to use.</param>
            <param name="result">The element, if this method returns true.</param>
            <returns>True if an element was successfully read, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader.Read``1(Microsoft.Research.Naiad.Serialization.NaiadSerialization{``0})">
            <summary>
            Reads an element from the stream, using a specific deserializer.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="deserializer">The deserializer to use.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader.Dispose">
            <summary>
            Frees all resources associated with this reader.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.NaiadReader`1">
            <summary>
            Reads elements of a specific type written in the Naiad message format from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TElement">type of records to deserialize</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader`1.#ctor(System.IO.Stream)">
            <summary>
            Constructs a new NaiadReader that consumes data from the given stream and uses the given
            serialization format.
            </summary>
            <param name="stream">The stream from which data will be read.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader`1.TryRead(`0@)">
            <summary>
            Tries to read an element from the stream.
            </summary>
            <param name="result">The element, if this method returns true.</param>
            <returns>True if an element was successfully read, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader`1.TryReadMany(System.ArraySegment{`0})">
            <summary>
            Attempts to deserialize several elements from the target array segment
            </summary>
            <param name="target">Buffer to deserialize from</param>
            <returns>Number of elements deserialized</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader`1.Read">
            <summary>
            Reads an element from the stream, using a specific deserializer.
            </summary>
            <returns>The element.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadReader`1.Dispose">
            <summary>
            Frees all resources associated with this reader.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.NaiadWriter`1">
            <summary>
            Writes elements of a specific type in the Naiad message format to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TElement">The type of elements.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter`1.#ctor(System.IO.Stream,Microsoft.Research.Naiad.Serialization.SerializationFormat,System.Int32)">
            <summary>
            Constructs a new NaiadWriter that writes to the given stream and uses the given serialization format.
            </summary>
            <param name="stream">The stream to which data will be written.</param>
            <param name="serializationFormat">The serialization format to use.</param>
            <param name="blockSize">The block size to use: the serializer buffers up to this block size.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter`1.Write(`0)">
            <summary>
            Writes the given element to the stream.
            </summary>
            <param name="element">The element to write.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter`1.Flush">
            <summary>
            Flushes any unwritten data to the underlying stream
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadWriter`1.Dispose">
            <summary>
            Frees all resources associated with this writer.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.DataSource">
            <summary>
            Represents an untyped external input to a Naiad <see cref="T:Microsoft.Research.Naiad.Computation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.DataSource.Activate">
            <summary>
            Called by the Computation before it completes its own Activate().
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.DataSource.Join">
            <summary>
            Called by the Computation before it completes its own Join().
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.DataSource`1">
            <summary>
            Represents a typed external input of <typeparamref name="TRecord"/> records.
            </summary>
            <typeparam name="TRecord">The type of records that this data source provides.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.DataSource`1.RegisterInputs(System.Collections.Generic.IEnumerable{Microsoft.Research.Naiad.Dataflow.StreamingInput{`0}})">
            <summary>
            Called with a sequence of streaming inputs to attach to the data source.
            </summary>
            <param name="inputs">A sequence of streaming inputs, one per local worker.</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.DataSourceExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.DataSourceExtensionMethods.AsNaiadStream``1(System.Collections.Generic.IEnumerable{``0},Microsoft.Research.Naiad.Computation)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a constant Naiad <see cref="T:Microsoft.Research.Naiad.Stream`2"/>, using the supplied <paramref name="computation"/>.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="source">input records</param>
            <param name="computation">graph manager</param>
            <returns>single epoch stream containing source records</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.DataSourceExtensionMethods.AsNaiadStream``1(System.IObservable{System.Collections.Generic.IEnumerable{``0}},Microsoft.Research.Naiad.Computation)">
            <summary>
            Converts an <see cref="T:System.IObservable`1"/> into a Naiad <see cref="T:Microsoft.Research.Naiad.Stream`2"/>, using the supplied <paramref name="computation"/>. 
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="source">input sequence of records</param>
            <param name="computation">graph manager</param>
            <returns>stream of records, each epoch defined by consecutive OnNext calls from the observable</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.BaseDataSource`1">
            <summary>
            A default DataSource implementation, recording per-vertex inputs.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Input.BaseDataSource`1.inputsByWorker">
            <summary>
            StreamingInputs corresponding to local workers.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BaseDataSource`1.RegisterInputs(System.Collections.Generic.IEnumerable{Microsoft.Research.Naiad.Dataflow.StreamingInput{`0}})">
            <summary>
            Registers StreamingInputs with the DataSource.
            </summary>
            <param name="inputs">streaming inputs</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BaseDataSource`1.Activate">
            <summary>
            Called by the Computation before it completes its own Activate().
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BaseDataSource`1.Join">
            <summary>
            Called by the Computation before it completes its own Join().
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.ConstantDataSource`1">
            <summary>
            A DataSource with fixed contents, produced in the first epoch.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.ConstantDataSource`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a DataSource with constant contents.
            </summary>
            <param name="contents">source records</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.ConstantDataSource`1.#ctor(`0)">
            <summary>
            Constructs a DataSource with a single element.
            </summary>
            <param name="element">source record</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.ConstantDataSource`1.#ctor">
            <summary>
            Constructs a DataSource with no elements.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.ConstantDataSource`1.Activate">
            <summary>
            Supplies contents to the StreamingInputs.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.ConsoleDataSource">
            <summary>
            DataSource for reading from the Console.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.ConsoleDataSource.ConsumeLines">
            <summary>
            Consumes lines from the console
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.InterGraphDataSource`1">
            <summary>
            Data source from another graph manager.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSource`1.Activate">
            <summary>
            Registers itself with the InterGraphDataSink.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSource`1.OnRecv(`0[],System.Int32,System.Int32)">
            <summary>
            Forwards a message to the appropriate worker
            </summary>
            <param name="message">message</param>
            <param name="epoch">epoch</param>
            <param name="fromWorker">worker</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSource`1.OnNotify(System.Int32,System.Int32)">
            <summary>
            Forwards a notification to the appropriate worker
            </summary>
            <param name="epoch">epoch</param>
            <param name="fromWorker">worker</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSource`1.OnCompleted(System.Int32)">
            <summary>
            Forwards a completion to the appropriate worker
            </summary>
            <param name="fromWorker">worker</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSource`1.#ctor(Microsoft.Research.Naiad.Input.InterGraphDataSink{`0})">
            <summary>
            Constructs a new InterGraphDataSource from the given InterGraphDataSink.
            </summary>
            <param name="sink">The sink from which this source will consume records.</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.InterGraphDataSink`1">
            <summary>
            Data sink for use by other graph managers.
            </summary>
            <typeparam name="TRecord">The type of records produced by this sink.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSink`1.NewDataSource">
            <summary>
            Returns a new InterGraphDataSource for use by other graph managers.
            </summary>
            <returns>data source</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSink`1.Seal">
            <summary>
            Mark the collection as not accepting any more data sources
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.InterGraphDataSink`1.#ctor(Microsoft.Research.Naiad.Stream{`0,Microsoft.Research.Naiad.Dataflow.Epoch})">
            <summary>
            Creates a new InterGraphDataSink from a stream.
            </summary>
            <param name="stream">source stream</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.BatchedDataSource`1">
            <summary>
            DataSource supporting manual epoch-at-a-time data introduction.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnNext(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Introduces a batch of data for the next epoch.
            </summary>
            <param name="batch">records</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnNext(`0)">
            <summary>
            Introduces a single record for the next epoch.
            </summary>
            <param name="record">record</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnNext">
            <summary>
            Introduces no data for the next epcoh.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnCompleted(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Introduces a batch of data for the final epoch.
            </summary>
            <param name="batch">records</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnCompleted(`0)">
            <summary>
            Introduces a single record for the final epoch.
            </summary>
            <param name="record">record</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnCompleted">
            <summary>
            Introduces no data for the final epoch.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.Join">
            <summary>
            Does nothing except test if OnCompleted has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Input.BatchedDataSource`1.OnError(System.Exception)">
            <summary>
            Re-throws the exception.
            </summary>
            <param name="exception">exception</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.VertexOutput`2">
            <summary>
            Represents an output of a vertex, to which zero or more <see cref="T:Microsoft.Research.Naiad.Dataflow.SendChannel`2"/> (receivers)
            can be added.
            </summary>
            <typeparam name="TRecord">The type of records produced by this output.</typeparam>
            <typeparam name="TTime">The type of timestamp on the records produced by this output.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutput`2.AddReceiver(Microsoft.Research.Naiad.Dataflow.SendChannel{`0,`1})">
            <summary>
            Adds the given receiver to those that will be informed of every messages sent on this output.
            </summary>
            <param name="receiver">A receiver of messages.</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexOutput`2.Vertex">
            <summary>
            The vertex hosting the output.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.VertexInput`2">
            <summary>
            Defines the input of a vertex, which must process messages and manage re-entrancy for the runtime.
            </summary>
            <typeparam name="TRecord">The type of records accepted by thie input.</typeparam>
            <typeparam name="TTime">The type of timestamp on the records accepted by this input.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInput`2.Flush">
            <summary>
            Ensures that before returning all messages are sent and all progress traffic has been presented to the worker.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInput`2.OnReceive(Microsoft.Research.Naiad.Dataflow.Message{`0,`1},Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Callback for a message containing several records.
            </summary>
            <param name="message">the message</param>
            <param name="from">the source of the message</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInput`2.SerializedMessageReceived(Microsoft.Research.Naiad.Serialization.SerializedMessage,Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Callback for a serialized message. 
            </summary>
            <param name="message">the serialized message</param>
            <param name="from">the source of the serialized message</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexInput`2.LoggingEnabled">
            <summary>
            Reports and sets the status of logging; infrequently supported.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexInput`2.AvailableEntrancy">
            <summary>
            Indicates whether the destination vertex can be currently re-entered. Decremented and incremented by Naiad.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexInput`2.Vertex">
            <summary>
            The vertex hosting the input.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StageInput`2">
            <summary>
            Represents an input to a dataflow stage.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StageInput`2.ToString">
            <summary>
            Returns a string representation of this stage input.
            </summary>
            <returns>A string representation of this stage input.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Vertex">
            <summary>
            Represents a single abstract vertex in a dataflow graph. 
            (In Naiad, most concrete vertices extend <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex`1"/>.)
            </summary>
            <remarks>
            This class provides common functionality to dataflow vertices that do not depend
            on a specific <see cref="T:Microsoft.Research.Naiad.Time`1"/> type. When implementing a new vertex for use
            in Naiad, use <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex`1"/> as the base class.
            </remarks>
            <seealso cref="T:Microsoft.Research.Naiad.Dataflow.Vertex`1"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.UpdateReachability(System.Collections.Generic.List{Microsoft.Research.Naiad.Runtime.Progress.Pointstamp})">
            <summary>
            The worker will invoke this method periodically to indicate progress through
            the computation, and enable (for example) garbage-collection code to run.
            </summary>
            <param name="pointstamps">List of the minimal pointstamps at which this
            vertex could be reached.</param>
            <remarks>
            Classes overriding this method must call <c>base.UpdateReachability(pointstamps)</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.Flush">
            <summary>
            Flushes all buffered state at this vertex.
            </summary>
            <remarks>
            To add user-defined buffering, provide a corresponding flush action using the
            <see cref="M:Microsoft.Research.Naiad.Dataflow.Vertex.AddOnFlushAction(System.Action)"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.AddOnFlushAction(System.Action)">
            <summary>
            Adds a <see cref="T:System.Action"/> to be called each time the vertex <see cref="M:Microsoft.Research.Naiad.Dataflow.Vertex.Flush"/> method
            is called.
            </summary>
            <param name="onFlush">The flush action.</param>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Vertex.isShutdown">
            <summary>
            Currently available for checkpoint restore
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.OnShutdown">
            <summary>
            Called when the vertex is shut down
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Vertex.Stage">
            <summary>
            The stage to which this vertex belongs.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Vertex.VertexId">
            <summary>
            Vertex identifier (unique within the same <see cref="F:Microsoft.Research.Naiad.Dataflow.Vertex.Stage"/>).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.Checkpoint(System.Boolean)">
            <summary>
            Checkpoints the vertex
            </summary>
            <param name="isMajor"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.Checkpoint(Microsoft.Research.Naiad.Serialization.NaiadWriter)">
            <summary>
            Writes the state of this vertex to the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.Restore(Microsoft.Research.Naiad.Serialization.NaiadReader)">
            <summary>
            Restores the state of this vertex from the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.ToString">
            <summary>
            Returns a string representation of this vertex.
            </summary>
            <returns>A string representation of this vertex.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage)">
            <summary>
            Constructs a new Vertex with the given index in the given stage.
            </summary>
            <param name="index">Unique index of this vertex within the stage.</param>
            <param name="stage">Stage to which this vertex will belong.</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Vertex.Entrancy">
            <summary>
            Indicates number of additional times the vertex may be entered
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Vertex.IsShutDown">
            <summary>
            Indicates whether the vertex has been shut down
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Vertex.Stateful">
            <summary>
            Indicates that the vertex has state to save
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Vertex.LoggingOutput">
            <summary>
            The stream that will be used for logging updates to the vertex state.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Vertex`1">
            <summary>
            Represents a single abstract vertex in a dataflow graph, with a time type that
            indicates its level of nesting in the graph.
            </summary>
            <remarks>
            Derived classes may override the <see cref="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.OnNotify(`0)"/> method to handle synchronous
            progress notifications for times in TTime, and simulate batch execution.
            </remarks>
            <typeparam name="TTime">The type of timestamps on messages that this vertex processes.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.OnShutdown">
            <summary>
            Called after all messages and notifications have been delivered to this vertex.
            </summary>
            <remarks>
            Classes overriding this method must call <c>base.OnShutdown()</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.NotifyAt(`0)">
            <summary>
            Requests notification after all messages bearing the given time or earlier have been delivered.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.NotifyAt(`0,`0)">
            <summary>
            Requests a notification once all messages bearing the requirement time have been delivered, 
            with the capability to send messages at a different (potentially later) time.
            </summary>
            <param name="requirement">The requirement time.</param>
            <param name="capability">The capability time.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.OnNotify(`0)">
            <summary>
            Indicates that all messages bearing the given time (or earlier) have been delivered.
            </summary>
            <param name="time">The timestamp of the notification.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.Checkpoint(Microsoft.Research.Naiad.Serialization.NaiadWriter)">
            <summary>
            Writes the state of this vertex to the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.Restore(Microsoft.Research.Naiad.Serialization.NaiadReader)">
            <summary>
            Restores the state of this vertex from the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`0})">
            <summary>
            Constructs a new Vertex with the given index in the given stage.
            </summary>
            <param name="index">Unique index of this vertex within the stage.</param>
            <param name="stage">Stage to which this vertex will belong.</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.NamespaceDoc">
            <summary>
            The Microsoft.Research.Naiad namespace provides the basic classes that are used in all Naiad programs.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.NamespaceDoc">
            <summary>
            The Dataflow namespace provides classes that enable the programmer to construct dataflow graphs manually.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Iteration.NamespaceDoc">
            <summary>
            The Dataflow.Iteration namespace provides classes that enable adding cycles to a dataflow graph.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.PartitionBy.NamespaceDoc">
            <summary>
            The Dataflow.PartitionBy namespace provides extension methods that enable manual repartitioning of data between vertices.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.NamespaceDoc">
            <summary>
            The Dataflow.StandardVertices namespace provides base implementations of commonly-used dataflow vertex types, such as <see cref="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3"/> and <see cref="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.NamespaceDoc">
            <summary>
            The Diagnostics namespace provides classes that support <see cref="T:Microsoft.Research.Naiad.Diagnostics.Logging"/>, tracing, and observing various events in the Naiad runtime.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Input.NamespaceDoc">
            <summary>
            The Input namespace provides classes and extension methods for ingesting data into a Naiad computation.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Progress.NamespaceDoc">
            <summary>
            The Runtime.Progress namespace provides classes that support tracking the progress of a Naiad computation.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.NamespaceDoc">
            <summary>
            The Serialization namespace contains classes that support serialization of Naiad data for network and file I/O.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Utilities.NamespaceDoc">
            <summary>
            The Utilities namespace contains miscellaneous classes that support Naiad framework authors.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.PeloponneseClient.EnvJobGuid">
            <summary>
            the environment variable used to communicate the job Guid to a
            spawned process. This is set by the ProcessGroupManager for each
            process it creates
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.PeloponneseClient.EnvManagerServerUri">
            <summary>
            the environment variable used to communicate the server's Uri to a
            spawned process. This is set by the ProcessGroupManager for each
            process it creates
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.PeloponneseClient.EnvProcessGroup">
            <summary>
            the environment variable used to communicate the name of the process group
            that a spawned process belongs to. This is set by the ProcessGroupManager for each
            process it creates. The spawned process uses this name when it registers itself
            with the web server
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.PeloponneseClient.EnvProcessIdentifier">
            <summary>
            the environment variable used to communicate the identifier for a spawned
            process. This is set by the ProcessGroupManager for each
            process it creates. Identifiers must be unique (within a given group) over
            the lifetime of the server. The spawned process uses this identifier when
            it registers itself with the web server
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Progress.Frontier">
            <summary>
            Supports adding FrontierChanged events
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.Runtime.Progress.Frontier.OnFrontierChanged">
            <summary>
            Collection of events for frontier changes
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Controller">
            <summary>
            Manages the execution of Naiad programs in a single process.
            </summary>
            <remarks>
            A Naiad Controller manages the execution of one or more <see cref="T:Microsoft.Research.Naiad.Computation"/> 
            instances (or "computations"). To construct an instance of this interface, use the
            static methods of the <see cref="T:Microsoft.Research.Naiad.NewController"/> class.
            </remarks>
            <seealso cref="T:Microsoft.Research.Naiad.NewController"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Controller.NewComputation">
            <summary>
            Constructs a new computation in this controller.
            </summary>
            <returns>The dataflow graph manager for the new computation.</returns>
            <example>
            A computation is typically created in a <see cref="T:Microsoft.Research.Naiad.Controller"/> as follows:
            <code>
            using Microsoft.Research.Naiad;
            
            class Program
            {
                public static void Main(string[] args)
                {
                    using (Controller controller = NewController.FromArgs(ref args))
                    {
                        using (Computation computation = controller.NewComputation())
                        {
                            /* Computation goes here. */
                            
                            computation.Join();
                        }
            
                        controller.Join();
                    }
                }
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Research.Naiad.NewController.FromArgs(System.String[]@)"/>
            <seealso cref="M:Microsoft.Research.Naiad.Computation.Join"/>
            <see cref="M:Microsoft.Research.Naiad.Controller.Join"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Controller.Join">
            <summary>
            Blocks the caller until all computation in this controller has terminated.
            </summary>
            <remarks>
            This method must be called before calling Dispose(),
            or an error will be raised.
            </remarks>
            <example>
            The typical usage of Join is before the end of the <c>using</c> block for a
            Controller:
            <code>
            using (Controller controller = NewController.FromArgs(ref args))
            {
                /* Computations go here. */
                
                controller.Join();
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Research.Naiad.NewController.FromArgs(System.String[]@)"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Controller.JoinAsync">
            <summary>
            Returns a task that blocks until all computation in this controller has terminated.
            </summary>
            <returns>A task that blocks until all computation is complete</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Controller.Configuration">
            <summary>
            The configuration used by this controller.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Controller.WorkerGroup">
            <summary>
            The workers associated with this controller.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Controller.DefaultPlacement">
            <summary>
            The default placement of new stages.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Controller.SerializationFormat">
            <summary>
            The serialization format used for all communication in this controller.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.NewComputation">
            <summary>
            Provides static constructors for creating a <see cref="T:Microsoft.Research.Naiad.OneOffComputation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.NewComputation.FromArgs(System.String[]@)">
            <summary>
            Constructs a <see cref="T:Microsoft.Research.Naiad.OneOffComputation"/> with a configuration extracted from the given command-line arguments.
            </summary>
            <param name="args">The command-line arguments, which will have Naiad-specific arguments removed.</param>
            <returns>A new <see cref="T:Microsoft.Research.Naiad.OneOffComputation"/> based on the given arguments.</returns>
            <remarks>
            This class provides a convenient mechanism for initializing a Naiad program that contains a single computation,
            by combining the roles of a <see cref="T:Microsoft.Research.Naiad.Controller"/> and a <see cref="T:Microsoft.Research.Naiad.Computation"/>.
            For more complicated cases, use <see cref="M:Microsoft.Research.Naiad.NewController.FromArgs(System.String[]@)"/> and <see cref="M:Microsoft.Research.Naiad.Controller.NewComputation"/>.
            </remarks>
            <example>
            Many Naiad programs initialize the <see cref="T:Microsoft.Research.Naiad.OneOffComputation"/> as follows:
            
            using Microsoft.Research.Naiad;
            
            class Program
            {
                public static void Main(string[] args)
                {
                    using (OneOffComputation computation = NewComputation.FromArgs(ref args))
                    {
                        /* Computation goes here. */
                            
                        computation.Join();
                    }
                }
            }
            </example>
            <seealso cref="T:Microsoft.Research.Naiad.Controller"/>
            <seealso cref="T:Microsoft.Research.Naiad.Computation"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.NewComputation.FromConfig(Microsoft.Research.Naiad.Configuration)">
            <summary>
            Constructs a <see cref="T:Microsoft.Research.Naiad.OneOffComputation"/> with the given configuration.
            </summary>
            <param name="conf">The configuration.</param>
            <returns>A new <see cref="T:Microsoft.Research.Naiad.OneOffComputation"/> based on the given arguments.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.NewController">
            <summary>
            Provides static constructors for creating a <see cref="T:Microsoft.Research.Naiad.Controller"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.NewController.FromArgs(System.String[]@)">
            <summary>
            Constructs a <see cref="T:Microsoft.Research.Naiad.Controller"/> with a configuration extracted from the given command-line arguments.
            </summary>
            <param name="args">The command-line arguments, which will have Naiad-specific arguments removed.</param>
            <returns>A new <see cref="T:Microsoft.Research.Naiad.Controller"/> based on the given arguments.</returns>
            <example>
            Many Naiad programs initialize the <see cref="T:Microsoft.Research.Naiad.Controller"/> as follows:
            <code>
            using Microsoft.Research.Naiad;
            
            class Program
            {
                public static void Main(string[] args)
                {
                    using (Controller controller = NewController.FromArgs(ref args))
                    {
                        using (Computation computation = controller.NewComputation())
                        {
                            /* Computation goes here. */
                            
                            computation.Join();
                        }
            
                        controller.Join();
                    }
                }
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Research.Naiad.Controller.Join"/>
            <seealso cref="M:Microsoft.Research.Naiad.Controller.NewComputation"/>
            <seealso cref="M:Microsoft.Research.Naiad.Computation.Join"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.NewController.FromConfig(Microsoft.Research.Naiad.Configuration)">
            <summary>
            Constructs a <see cref="T:Microsoft.Research.Naiad.Controller"/> with the given <see cref="T:Microsoft.Research.Naiad.Configuration"/>.
            </summary>
            <param name="conf">The configuration</param>
            <returns>A new <see cref="T:Microsoft.Research.Naiad.Controller"/> with the given <see cref="T:Microsoft.Research.Naiad.Configuration"/>.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.BaseController">
            <summary>
            Responsible for managing the execution of multiple worker threads within a process.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.BaseController.Join">
            <summary>
            Blocks until all computation is complete and resources are released.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.BaseController.#ctor(Microsoft.Research.Naiad.Configuration)">
            <summary>
            Constructs a controller for a new computation.
            </summary>
            <param name="config">Controller configuration</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.BaseController.Sync(System.Int32)">
            <summary>
            Blocks until all computation associated with the supplied epoch have been retired.
            </summary>
            <param name="epoch">Epoch to wait for</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.BaseController.Workers">
            <summary>
            Returns information about the local workers controlled by this controller.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup">
            <summary>
            Represents a groupb of Naiad workers that are controlled by a single Controller.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.WorkerGroup">
            <summary>
            Represents a group of workers and allows registration of callbacks
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.WorkerGroup.Count">
            <summary>
            Number of workers
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.Starting">
            <summary>
            This event is raised by each worker when it initially starts.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.Waking">
            <summary>
            This event is raised by each worker when it wakes from sleeping.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.WorkItemStarting">
            <summary>
            This event is raised by a worker immediately before executing a work item.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.WorkItemEnding">
            <summary>
            This event is raised by a worker immediately after executing a work item.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.WorkItemEnqueued">
            <summary>
            This event is raised by a worker immediately after enqueueing a work item.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.Sleeping">
            <summary>
            This event is raised by a worker when it becomes idle, because it has no work to execute.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.WorkerGroup.Terminating">
            <summary>
            This event is raised by a worker when it has finished all work, and the computation has terminated.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Controlling.InternalWorkerGroup.BlockScheduler(System.Threading.AutoResetEvent,System.Int64)">
            <summary>
            Blocks the scheduler waiting for the event to be signalled.
            Used in broadcast wakeup implementation.
            </summary>
            <param name="selectiveEvent"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.Count">
            <summary>
            Returns the number of workers in this group.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.Starting">
            <summary>
            This event is fired by each worker when it initially starts.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.Waking">
            <summary>
            This event is fired by each worker when it wakes from sleeping.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.WorkItemStarting">
            <summary>
            This event is fired by a worker immediately before executing a work item.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.WorkItemEnding">
            <summary>
            This event is fired by a worker immediately after executing a work item.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.WorkItemEnqueued">
            <summary>
            This event is fired by a worker immediately after enqueueing a work item.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.Sleeping">
            <summary>
            This event is fired by a worker when it becomes idle, because it has no work to execute.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.BaseController.BaseWorkerGroup.Terminating">
            <summary>
            This event is fired by a worker when it has finished all work, and the computation has terminated.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel">
            <summary>
            Represents a mechanism for sending untyped messages to a distributed group of processes.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.SendBufferSegment(Microsoft.Research.Naiad.Serialization.MessageHeader,System.Int32,Microsoft.Research.Naiad.Serialization.BufferSegment,System.Boolean,System.Boolean)">
            <summary>
            Sends the given buffer segment to the given destination process.
            </summary>
            <param name="header">The header of the message.</param>
            <param name="destProcessID">The ID for the destination process, or -1 for broadcast messages.</param>
            <param name="segment">The buffer segment containing the message header and body.</param>
            <param name="HighPriority">Indicates whether the message should be sent with high or normal priority.</param>
            <param name="wakeUp">Indicates whether the message should be sent immediately.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.BroadcastBufferSegment(Microsoft.Research.Naiad.Serialization.MessageHeader,Microsoft.Research.Naiad.Serialization.BufferSegment)">
            <summary>
            Sends the given buffer segment to all other processes.
            </summary>
            <param name="header">The header of the message.</param>
            <param name="segment">The buffer segment containing the message header and body.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.RegisterMailbox(Microsoft.Research.Naiad.Dataflow.Channels.Mailbox)">
            <summary>
            Registers the given mailbox to receive messages.
            </summary>
            <param name="mailbox">The mailbox to which messages with the same channel and destination vertex ID should be sent.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.GetBufferPool(System.Int32,System.Int32)">
            <summary>
            Returns a buffer pool to be used for messages sent to the given process.
            </summary>
            <param name="processID">The ID for the destination process, or -1 for broadcast messages.</param>
            <param name="workerID">The local ID of the worker that is requesting the pool, or -1 for a shared pool.</param>
            <returns>A buffer pool to be used for messages sent to the given process.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.GetSequenceNumber(System.Int32)">
            <summary>
            Returns the next sequence number for a message to the given process.
            </summary>
            <param name="destProcessId">The ID for the destination process, or -1 for broadcast messages.</param>
            <returns>The next sequence number for a message to the given process.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.WaitForAllConnections">
            <summary>
            Returns when connections have been established to and from all processes.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.StartMessageDelivery">
            <summary>
            Starts delivering outgoing and incoming messages.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.DoStartupBarrier">
            <summary>
            Blocks until all processes have acknowledged startup.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.QueryStatistic(Microsoft.Research.Naiad.RuntimeStatistic)">
            <summary>
            Returns the value of the given statistic.
            </summary>
            <param name="s">The statistic to be queried.</param>
            <returns>The value of the given statistic.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.Id">
            <summary>
            Returns the process-local unique ID of this network channel.
            
            In current use, this is always zero.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Runtime.Networking.NetworkChannel.SendPageSize">
            <summary>
            Returns the size (in bytes) of a page of serialized data used for sending.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Progress.Update">
            <summary>
            An update to a pointstamp count
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Update.Pointstamp">
            <summary>
            The pointstamp
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Update.Delta">
            <summary>
            The change in the count of the pointstamp
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Progress.ProgressUpdateAggregator">
            <summary>
            The aggregator takes progress updates (pointstamp, delta) and accumulates them until it is required to flush the accumulation.
            The requirement is based on a liveness constraint: the possibility than any delta in the accumulation might advance the frontier.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.FrontierChangedEventArgs">
            <summary>
            Container for Frontier events
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.FrontierChangedEventArgs.NewFrontier">
            <summary>
            The minimal antichain of <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/>s in the new frontier.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.FrontierChangedEventArgs.#ctor(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp[])">
            <summary>
            Constructs new event arguments with the given <paramref name="newFrontier"/>.
            </summary>
            <param name="newFrontier">The new frontier.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.ProgressUpdateProducer.Start">
            <summary>
            Lock the producer and transmit pointstamp counts to the appropriate consumer(s)
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.InputStage.IsCompleted">
            <summary>
            Returns true if OnCompleted() has been called on the input.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.InputStage.CurrentEpoch">
            <summary>
            Returns the number of the pending epoch of input data.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.InputStage.MaximumValidEpoch">
            <summary>
            Return the largest epoch known to be valid.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.InputStage.InputId">
            <summary>
            Returns the stage identifier.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.InputStage`1">
            <summary>
            TODO this class is deprecated by virtue of StreamingInputStage. Still used by Reporting, but that can be fixed.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.InputVertex`1">
            <summary>
            TODO this class is deprecated by virtue of StreamingInputVertex. Still used by Reporting, but that can be fixed.
            </summary>
            <typeparam name="S"></typeparam>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StreamingInput`1">
            <summary>
            Represents a streaming input to a Naiad computation.
            </summary>
            <typeparam name="TRecord">The type of records accepted by this input.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StreamingInput`1.OnStreamingRecv(`0[],System.Int32)">
            <summary>
            Introduces a batch of records at the same epoch.
            </summary>
            <param name="batch">records</param>
            <param name="epoch">epoch</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StreamingInput`1.OnStreamingNotify(System.Int32)">
            <summary>
            Indicates that no further records will appear at or before epoch.
            </summary>
            <param name="epoch">epoch</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StreamingInput`1.OnCompleted">
            <summary>
            Indicates that no further records will appear.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.StreamingInput`1.WorkerId">
            <summary>
            Indicates the local worker identifier.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Reporting.AggregateType">
            <summary>
            The type of aggregation that is performed on a set of integers or doubles during reporting
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1">
            <summary>
            Interface used by vertex code to log messages and counters that are aggregated 
            and written out by centralized logging code when reporting is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.Log(System.String)">
            <summary>
            Sends a log message to be written immediately to the 'out-of-band' logging subsystem. If
            Configuration.DomainReporting is true, this will be written to a file called rtdomain.txt
            at the root vertex's computer, otherwise it will be written to the console at the vertex's
            local computer.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.Log(System.String,`0)">
            <summary>
            Sends a log message to be written immediately to the inline logging subsystem that uses the graph's
            time domain. If Configuration.InlineReporting is true, this will be written to a file called rtinline.txt
            at the root vertex's computer, otherwise it will be written to the console at the vertex's
            local computer. The log message is written out in the form "time.entry"
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.LogAggregate(System.String,Microsoft.Research.Naiad.Dataflow.Reporting.AggregateType,System.Int64,`0)">
            <summary>
            Incorporates value into the logical-time-based aggregation called name. If Configuration.InlineReporting and
            Configuration.AggregateReporting are both true, then the final aggregate of all values with the same time will
            be written to rtinline.txt at the root vertex's computer once all computation with that time has drained from
            the system. This call is identical to logging an integer aggregate with a count of 1.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.LogAggregate(System.String,Microsoft.Research.Naiad.Dataflow.Reporting.AggregateType,System.Int64,System.Int64,`0)">
            <summary>
            Incorporates (value,count) into the logical-time-based aggregation called name. If Configuration.InlineReporting and
            Configuration.AggregateReporting are both true, then the final aggregate of all values with the same time will
            be written to rtinline.txt at the root vertex's computer once all computation with that time has drained from
            the system. count is used only for aggregates of type Reporting.AggregateType.Average, for which the final
            aggregate is Sum(values)/Sum(counts).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.LogAggregate(System.String,Microsoft.Research.Naiad.Dataflow.Reporting.AggregateType,System.Double,`0)">
            <summary>
            Incorporates value into the logical-time-based aggregation called name. If Configuration.InlineReporting and
            Configuration.AggregateReporting are both true, then the final aggregate of all values with the same time will
            be written to rtinline.txt at the root vertex's computer once all computation with that time has drained from
            the system. This call is identical to logging a double aggregate with a count of 1.0.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.LogAggregate(System.String,Microsoft.Research.Naiad.Dataflow.Reporting.AggregateType,System.Double,System.Int64,`0)">
            <summary>
            Incorporates (value,count) into the logical-time-based aggregation called name. If Configuration.InlineReporting and
            Configuration.AggregateReporting are both true, then the final aggregate of all values with the same time will
            be written to rtinline.txt at the root vertex's computer once all computation with that time has drained from
            the system. count is used only for aggregates of type Reporting.AggregateType.Average, for which the final
            aggregate is Sum(values)/Sum(counts).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Reporting.IReporting`1.ForwardLog(Microsoft.Research.Naiad.Pair{System.String,`0}[])">
            <summary>
            Writes an array of log messages. This is equivalent to calling Log(entry, time) for every element in message,
            but has better performance.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.TimeContext`1">
            <summary>
            Represents a potentially nested scope in a dataflow computation, in which all messages have the same time type.
            </summary>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="T:Microsoft.Research.Naiad.DataStructures.SpinedList`1">
            <summary>
            A list with a spine that grows.
            </summary>
            <typeparam name="T">record type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.DataStructures.SpinedList`1.Count">
            <summary>
            Number of valid records.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.DataStructures.SpinedList`1.Add(`0)">
            <summary>
            Adds an element to the list
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Microsoft.Research.Naiad.DataStructures.SpinedList`1.AsEnumerable">
            <summary>
            Enumerates the contents of the list AND CONSUMES THE ELEMENTS.
            XXX : Implementation should record that data are now invalid.
            </summary>
            <returns>Element enumeration</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.DataStructures.SpinedList`1.Checkpoint(Microsoft.Research.Naiad.Serialization.NaiadWriter,Microsoft.Research.Naiad.Serialization.NaiadSerialization{`0},Microsoft.Research.Naiad.Serialization.NaiadSerialization{System.Int32})">
            <summary>
            Checkpoints to NaiadWriter
            </summary>
            <param name="writer"></param>
            <param name="serializer"></param>
            <param name="intSerializer"></param>
        </member>
        <member name="M:Microsoft.Research.Naiad.DataStructures.SpinedList`1.Restore(Microsoft.Research.Naiad.Serialization.NaiadReader,Microsoft.Research.Naiad.Serialization.NaiadSerialization{`0},Microsoft.Research.Naiad.Serialization.NaiadSerialization{System.Int32})">
            <summary>
            Restores from NaiadReader
            </summary>
            <param name="reader"></param>
            <param name="serializer"></param>
            <param name="intSerializer"></param>
        </member>
        <member name="M:Microsoft.Research.Naiad.DataStructures.SpinedList`1.#ctor">
            <summary>
            Constructs a new SpinedList
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.DataStructures.SpinedList`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">index</param>
            <returns>element at position index</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3">
            <summary>
            Vertex with one input, one output, which calls OnRecv for each record, and OnNotify(time) if it invokes ScheduleAt(time).
            </summary>
            <typeparam name="TInput">Source record type</typeparam>
            <typeparam name="TOutput">Result record type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3.Output">
            <summary>
            Manages the list of intended recipients, and the buffering and sending of output.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3.OnReceive(Microsoft.Research.Naiad.Dataflow.Message{`0,`2})">
            <summary>
            A programmer-supplied action to be performed on each message receipt.
            </summary>
            <param name="message">Received message</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3.MakeStage(Microsoft.Research.Naiad.Stream{`0,`2},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`2},Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex{`0,`1,`2}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},System.String)">
            <summary>
            Factory to produce a stage consisting of these vertices.
            </summary>
            <param name="stream">Source data stream</param>
            <param name="factory">Function from index and stage to a UnaryVertex</param>
            <param name="inputPartitionBy">input partitioning requirement</param>
            <param name="outputPartitionBy">output partitioning guarantee</param>
            <param name="name">console-friendly name</param>
            <returns>stream of records from the vertices</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3.MakeStage(Microsoft.Research.Naiad.Dataflow.Placement,Microsoft.Research.Naiad.Stream{`0,`2},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`2},Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex{`0,`1,`2}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},System.String)">
            <summary>
            Factory to produce a stage consisting of these vertices.
            </summary>
            <param name="placement">Placement to use for vertices in the stage</param>
            <param name="stream">Source data stream</param>
            <param name="factory">Function from index and stage to a UnaryVertex</param>
            <param name="inputPartitionBy">input partitioning requirement</param>
            <param name="outputPartitionBy">output partitioning guarantee</param>
            <param name="name">console-friendly name</param>
            <returns>stream of records from the vertices</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex`3.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`2})">
            <summary>
            Creates a new UnaryVertex
            </summary>
            <param name="index">vertex index</param>
            <param name="stage">host stage</param>
        </member>
        <member name="F:Microsoft.Research.Naiad.Frameworks.Reduction.LocalKeyedReduceVertex`7.reducers">
            private A[] reducers;
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.PartitionBy.ExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.PartitionBy.ExtensionMethods.PartitionBy``2(Microsoft.Research.Naiad.Stream{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Partitions a stream by a function.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
            <param name="stream">stream</param>
            <param name="partitionBy">partitioning function</param>
            <returns>a repartitioned stream</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.PartitionBy.ExtensionMethods.AssumePartitionedBy``2(Microsoft.Research.Naiad.Stream{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Claims to partition a stream by a function, but does not actually.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
            <param name="stream">stream</param>
            <param name="partitionBy">partitioning function</param>
            <returns>a repartitioned stream</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.PartitionBy.ExtensionMethods.AssertPartitionedBy``2(Microsoft.Research.Naiad.Stream{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Asserts a stream is partitioned by a function, and complains otherwise.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
            <param name="stream">stream</param>
            <param name="partitionBy">partitioning function</param>
            <returns>a repartitioned stream</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Stream`2">
            <summary>
            Represents a stream of records each tagged with a time.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="P:Microsoft.Research.Naiad.Stream`2.PartitionedBy">
            <summary>
            Expression indicating a partitioning property the stream obeys, or null if none exists.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Stream`2.ForStage">
            <summary>
            Stage the stream is produced by.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Stream`2.Context">
            <summary>
            Time context for the stream.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods">
            <summary>
            A collection of extension methods that facilitate checkpointing and restoring
            standard data structures.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods.Checkpoint``1(System.Collections.Generic.List{``0},Microsoft.Research.Naiad.Serialization.NaiadWriter)">
            <summary>
            Writes this list to the given writer.
            </summary>
            <typeparam name="TElement">The type of elements in the list.</typeparam>
            <param name="list">The list to be written.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods.Restore``1(System.Collections.Generic.List{``0},Microsoft.Research.Naiad.Serialization.NaiadReader)">
            <summary>
            Reads this list from the given reader.
            </summary>
            <typeparam name="TElement">The type of elements in the list.</typeparam>
            <param name="list">The list to be read.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods.Checkpoint``2(System.Collections.Generic.Dictionary{``0,``1},Microsoft.Research.Naiad.Serialization.NaiadWriter)">
            <summary>
            Writes this dictionary to the given writer.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to be written.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods.Restore``2(System.Collections.Generic.Dictionary{``0,``1},Microsoft.Research.Naiad.Serialization.NaiadReader)">
            <summary>
            Reads this dictionary from the given reader.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to be read.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods.Checkpoint``1(``0[],System.Int32,Microsoft.Research.Naiad.Serialization.NaiadWriter)">
            <summary>
            Writes the given count of elements from this array to the given writer.
            </summary>
            <typeparam name="TElement">The type of elements in the array.</typeparam>
            <param name="array">The array to be written.</param>
            <param name="count">The number of elements to be written.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CheckpointRestoreExtensionMethods.RestoreArray``1(Microsoft.Research.Naiad.Serialization.NaiadReader,System.Func{System.Int32,``0[]})">
            <summary>
            Reads an array from the given reader.
            </summary>
            <typeparam name="TElement">The type of elements in the array.</typeparam>
            <param name="reader">The reader.</param>
            <param name="allocator">An allocator function that allocates an array with at least as many elements as its argument.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Iteration.Feedback`2">
            <summary>
            Represents a feedback edge in a Naiad computation
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Iteration.Feedback`2.Output">
            <summary>
            Output of the feedback edge
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Iteration.Feedback`2.Input">
            <summary>
            Input to the feedback edge
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1">
            <summary>
            Represents a Naiad loop context
            </summary>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.EnterLoop``1(Microsoft.Research.Naiad.Stream{``0,`0})">
            <summary>
            Introduces a stream into the loop context from outside
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="stream">stream</param>
            <returns>the same stream with an addition time coordinate</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.EnterLoop``1(Microsoft.Research.Naiad.Stream{``0,`0},System.Func{``0,System.Int32})">
            <summary>
            Introduces a stream into the loop context from outside
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="stream">stream</param>
            <param name="initialIteration">initial iteration selector</param>
            <returns>the same stream with an addition time coordinate</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.ExitLoop``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.IterationIn{`0}},System.Int32)">
            <summary>
            Extracts a stream from a loop context
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="stream">the stream</param>
            <param name="iterationNumber">the iteration to extract</param>
            <returns>A stream containing records in the corresponding iteration</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.ExitLoop``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.IterationIn{`0}})">
            <summary>
            Extracts a stream from a loop context
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="stream">the stream</param>
            <returns>A stream containing all records</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.Delay``1">
            <summary>
            Constructs a new feedback edge
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <returns>A new feedback edge</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.Delay``1(System.Int32)">
            <summary>
            Constructs a new feedback edge with a maximum number of iterations
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="maxIters">maximum number of iterations</param>
            <returns>A new feedback edge</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.Delay``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Constructs a new feedback edge with an enforced partitioning
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="partitionedBy">partitioning function</param>
            <returns>A new feedback edge</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.Delay``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Int32)">
            <summary>
            Constructs a new feedback edge with an enforced partitioning and a maximum number of iterations
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="partitionedBy">partitioning function</param>
            <param name="maxIters">maximum number of iterations</param>
            <returns>A new feedback edge</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Iteration.LoopContext`1.#ctor(Microsoft.Research.Naiad.Dataflow.TimeContext{`0},System.String)">
            <summary>
            Constructs a new LoopContext from a containing TimeContext
            </summary>
            <param name="outerContext">outer time context</param>
            <param name="name">a descriptive name</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Subscription">
            <summary>
            Represents an observable "output" of a Naiad computation, and provides a means
            of synchronizing with the computation.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Subscription.Sync(System.Int32)">
            <summary>
            Blocks the caller until this subscription has processed all inputs up to and
            including the given epoch.
            </summary>
            <param name="time">The epoch.</param>
            <remarks>
            To synchronize on all subscriptions in a computation at a particular epoch, use the <see cref="M:Microsoft.Research.Naiad.Computation.Sync(System.Int32)"/> method.
            To block until the entire computation has terminated, use the <see cref="M:Microsoft.Research.Naiad.Computation.Join"/> method.
            </remarks>
            <seealso cref="M:Microsoft.Research.Naiad.Computation.Sync(System.Int32)"/>
            <seealso cref="M:Microsoft.Research.Naiad.Computation.Join"/>
        </member>
        <member name="T:Microsoft.Research.Naiad.SubscribeExtensionMethods">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.SubscribeExtensionMethods.Subscribe``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.Epoch})">
            <summary>
            Subscribes to a stream with no callback.
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="stream">input stream</param>
            <returns>subscription for synchronization</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.SubscribeExtensionMethods.Subscribe``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.Epoch},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Subscribes to a stream with a per-epoch callback applied by one worker.
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="stream">input stream</param>
            <param name="action">callback</param>
            <returns>subscription for synchronization</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.SubscribeExtensionMethods.Subscribe``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.Epoch},System.Action{System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Subscribes to a stream with a per-epoch callback applied at each worker.
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="stream">input stream</param>
            <param name="action">callback on worker id and records</param>
            <returns>subscription for synchronization</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.SubscribeExtensionMethods.Subscribe``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.Epoch},System.Action{System.Int32,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Subscribes to a stream with a callback parameterized by worker id, epoch, and records.
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="stream">input stream</param>
            <param name="action">callback on worker id, epoch id, and records</param>
            <returns>subscription for synchronization</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.SubscribeExtensionMethods.Subscribe``1(Microsoft.Research.Naiad.Stream{``0,Microsoft.Research.Naiad.Dataflow.Epoch},System.Action{Microsoft.Research.Naiad.Dataflow.Message{``0,Microsoft.Research.Naiad.Dataflow.Epoch},System.Int32},System.Action{Microsoft.Research.Naiad.Dataflow.Epoch,System.Int32},System.Action{System.Int32})">
            <summary>
            Subscribes to a stream with callbacks for record receipt, epoch completion notification, and stream completion notification.
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="stream">input stream</param>
            <param name="onRecv">receipt callback</param>
            <param name="onNotify">notification callback</param>
            <param name="onComplete">completion callback</param>
            <returns>subscription for synchronization</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Subscription`1">
            <summary>
            Manages several subscribe vertices, and allows another thread to block until all have completed a specified epoch
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Subscription`1.Signal(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            Called by vertices, indicates the receipt of an OnNotify(time)
            </summary>
            <param name="time">Time that has completed for the vertex</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Subscription`1.Sync(System.Int32)">
            <summary>
            Blocks the caller until this subscription has completed the given epoch.
            </summary>
            <param name="epoch">Time to wait until locally complete</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.SubscribeStreamingVertex`1">
            <summary>
            Individual subscription vertex, invokes actions and notifies parent stage.
            </summary>
            <typeparam name="R">Record type</typeparam>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkVertex`2">
            <summary>
            Vertex with one input, no outputs, which accumulates inputs and schedules itself for each time seen.
            </summary>
            <typeparam name="TOutput">Source type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkVertex`2.OnReceive(Microsoft.Research.Naiad.Dataflow.Message{`0,`1})">
            <summary>
            Called when a message is received.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkVertex`2.MakeStage(Microsoft.Research.Naiad.Stream{`0,`1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1},Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkVertex{`0,`1}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.String)">
            <summary>
            Constructs a new Sink stage
            </summary>
            <param name="stream">source stream</param>
            <param name="factory">vertex factory</param>
            <param name="partitionedBy">partitioning requirement</param>
            <param name="name">stage name</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkVertex`2.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1})">
            <summary>
            Constructs a SinkVertex from an index and stage
            </summary>
            <param name="index">index</param>
            <param name="stage">stage</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.SubscribeStreamingVertex`1.OnNotify(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            When a time completes, invokes an action on received data, signals parent stage, and schedules OnNotify for next expoch.
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.SubscribeBufferingVertex`1">
            <summary>
            Individual subscription vertex, invokes actions and notifies parent stage.
            </summary>
            <typeparam name="R">Record type</typeparam>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkBufferingVertex`2">
            <summary>
            Vertex with one input, which accumulates inputs and schedules itself for each time seen. 
            </summary>
            <typeparam name="TOutput">Source record type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkBufferingVertex`2.Input">
            <summary>
            Input buffer
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkBufferingVertex`2.OnReceive(Microsoft.Research.Naiad.Dataflow.Message{`0,`1})">
            <summary>
            Called when a message is received.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkBufferingVertex`2.OnNotify(`1)">
            <summary>
            Indicates that all messages bearing the given time (or earlier) have been delivered.
            </summary>
            <param name="time">The timestamp of the notification.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkBufferingVertex`2.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1},System.Linq.Expressions.Expression{System.Action{System.Collections.Generic.IEnumerable{`0}}})">
            <summary>
            Creates a new SinkBufferingStage
            </summary>
            <param name="index">vertex index</param>
            <param name="stage">host stage</param>
            <param name="action">action on input collection</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.SubscribeBufferingVertex`1.OnNotify(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            When a time completes, invokes an action on received data, signals parent stage, and schedules OnNotify for next expoch.
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2">
            <summary>
            A repository for input records, stored indexed by time. Calls NotifyAt on record receipt.
            </summary>
            <typeparam name="TRecord">The type of records in this buffer.</typeparam>
            <typeparam name="TTime">The type of timestamp by which this buffer is indexed.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.GetRecordsAt(`1)">
            <summary>
            Enumerates (and destroys) input records associated with the given <paramref name="time"/>.
            </summary>
            <param name="time">time</param>
            <returns>The sequence of input records associated with the given <paramref name="time"/>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.#ctor(Microsoft.Research.Naiad.Dataflow.Vertex{`1})">
            <summary>
            Constructs new input buffer for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex to which this buffer will belong.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.Flush">
            <summary>
            Flushes the associated vertex.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.OnReceive(Microsoft.Research.Naiad.Dataflow.Message{`0,`1},Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Buffers the content of the given <paramref name="message"/>, and schedules
            a corresponding notification on the owning <see cref="P:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.Vertex"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="sender">The sender of the message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.SerializedMessageReceived(Microsoft.Research.Naiad.Serialization.SerializedMessage,Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Buffers the content of the given <paramref name="serializedMessage"/>, and
            schedules a corresponding notification on the owning <see cref="P:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.Vertex"/>.
            </summary>
            <param name="serializedMessage">The serialized message.</param>
            <param name="sender">The sender of the message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.ToString">
            <summary>
            Returns a string representation of this buffer.
            </summary>
            <returns>A string representation of this buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.Restore(Microsoft.Research.Naiad.Serialization.NaiadReader)">
            <summary>
            Restores this buffer from the given <see cref="T:Microsoft.Research.Naiad.Serialization.NaiadReader"/>.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.Checkpoint(Microsoft.Research.Naiad.Serialization.NaiadWriter)">
            <summary>
            Checkpoints the contents of this buffer to the given <see cref="T:Microsoft.Research.Naiad.Serialization.NaiadWriter"/>.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.LoggingEnabled">
            <summary>
            Controls whether logging occurs (presently disabled)
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.AvailableEntrancy">
            <summary>
            Indicates available entrancy; always 1 as this class buffers everything.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexInputBuffer`2.Vertex">
            <summary>
            The vertex to which this buffer belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2">
            <summary>
            An intermediate buffer for records sent by a <see cref="P:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.Vertex"/>.
            </summary>
            <typeparam name="TRecord">The type of records to be sent.</typeparam>
            <typeparam name="TTime">The type of timestamp on the records to be sent.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.AddReceiver(Microsoft.Research.Naiad.Dataflow.SendChannel{`0,`1})">
            <summary>
            Adds a recipient for records handled by this buffer.
            </summary>
            <param name="recipient">The recipient.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.Send(Microsoft.Research.Naiad.Dataflow.Message{`0,`1})">
            <summary>
            Sends a full message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.Flush">
            <summary>
            Flushes all internal buffers associated with this buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.GetBufferForTime(`1)">
            <summary>
            Returns a per-time buffer with for records with a single time, using which records may be sent.
            </summary>
            <param name="time">The constant time.</param>
            <returns>A new per-time buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.#ctor(Microsoft.Research.Naiad.Dataflow.Vertex)">
            <summary>
            Constructs a VertexOutputBuffer for the given vertex.
            </summary>
            <param name="vertex">The vertex to which this buffer will belong.</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2.Vertex">
            <summary>
            The vertex to which this buffer belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.VertexOutputBufferPerTime`2">
            <summary>
            Represents a per-time buffer for sending records with a single time.
            </summary>
            <typeparam name="TRecord">The type of records to be sent.</typeparam>
            <typeparam name="TTime">The type of timestamp on the records to be sent.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBufferPerTime`2.Send(`0)">
            <summary>
            Sends the given record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexOutputBufferPerTime`2.#ctor(Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer{`0,`1},`1)">
            <summary>
            Constructions a new buffer from its parent <see cref="T:Microsoft.Research.Naiad.Dataflow.VertexOutputBuffer`2"/> and a constant logical time.
            </summary>
            <param name="parent">The parent buffer.</param>
            <param name="time">The constant time.</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4">
            <summary>
            Vertex with two inputs, one output, which calls OnRecv1/OnRecv2 for each input, and OnNotify(time) if ScheduleAt(time) is ever called.
            </summary>
            <typeparam name="TInput1">Source 1 record type</typeparam>
            <typeparam name="TInput2">Source 2 record type</typeparam>
            <typeparam name="TOutput">Result record type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4.Output">
            <summary>
            The buffer for output records.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4.OnReceive1(Microsoft.Research.Naiad.Dataflow.Message{`0,`3})">
            <summary>
            Called when a message is received on the first input.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4.OnReceive2(Microsoft.Research.Naiad.Dataflow.Message{`1,`3})">
            <summary>
            Called when a message is received on the second input.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4.MakeStage(Microsoft.Research.Naiad.Stream{`0,`3},Microsoft.Research.Naiad.Stream{`1,`3},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`3},Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex{`0,`1,`2,`3}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},System.Linq.Expressions.Expression{System.Func{`2,System.Int32}},System.String)">
            <summary>
            Creates a new stream from the output of a stage of BinaryVertex objects.
            </summary>
            <param name="stream1">first input stream</param>
            <param name="stream2">second input stream</param>
            <param name="factory">factory from index and stage to BinaryVertex</param>
            <param name="input1PartitionBy">first input partitioning requirement</param>
            <param name="input2PartitionBy">second input partitioning requirement</param>
            <param name="outputPartitionBy">output partitioning guarantee</param>
            <param name="name">friendly name</param>
            <returns>the output stream of the corresponding binary stage.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4.MakeStage(Microsoft.Research.Naiad.Dataflow.Placement,Microsoft.Research.Naiad.Stream{`0,`3},Microsoft.Research.Naiad.Stream{`1,`3},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`3},Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex{`0,`1,`2,`3}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},System.Linq.Expressions.Expression{System.Func{`2,System.Int32}},System.String)">
            <summary>
            Creates a new stream from the output of a stage of BinaryVertex objects.
            </summary>
            <param name="placement">Placement to use for vertices in the stage</param>
            <param name="stream1">first input stream</param>
            <param name="stream2">second input stream</param>
            <param name="factory">factory from index and stage to BinaryVertex</param>
            <param name="input1PartitionBy">first input partitioning requirement</param>
            <param name="input2PartitionBy">second input partitioning requirement</param>
            <param name="outputPartitionBy">output partitioning guarantee</param>
            <param name="name">friendly name</param>
            <returns>the output stream of the corresponding binary stage.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex`4.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`3})">
            <summary>
            Creates a new BinaryVertex
            </summary>
            <param name="index">vertex index</param>
            <param name="stage">host stage</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryBufferingVertex`3">
            <summary>
            Vertex with one input, one output, which accumulates inputs and schedules itself for each time seen. 
            </summary>
            <typeparam name="TInput">Source record type</typeparam>
            <typeparam name="TOutput">Result record type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryBufferingVertex`3.Input">
            <summary>
            Input buffer
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryBufferingVertex`3.OnReceive(Microsoft.Research.Naiad.Dataflow.Message{`0,`2})">
            <summary>
            Called when a message is received.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryBufferingVertex`3.OnNotify(`2)">
            <summary>
            Indicates that all messages bearing the given time (or earlier) have been delivered.
            </summary>
            <param name="time">The timestamp of the notification.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryBufferingVertex`3.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`2},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
            Constructs a new UnaryBufferingVertex.
            </summary>
            <param name="index">vertex index</param>
            <param name="stage">host stage</param>
            <param name="transformation">transformation from input collection to output collection</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4">
            <summary>
            Vertex with two inputs, one output, which accumulates inputs and schedules itself for each time seen.
            </summary>
            <typeparam name="TInput1">Source 1 record type</typeparam>
            <typeparam name="TInput2">Source 2 record type</typeparam>
            <typeparam name="TOutput">Result type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4.Input1">
            <summary>
            First input buffer
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4.Input2">
            <summary>
            Second input buffer
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4.OnReceive1(Microsoft.Research.Naiad.Dataflow.Message{`0,`3})">
            <summary>
            Called when a message is received on the first input.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4.OnReceive2(Microsoft.Research.Naiad.Dataflow.Message{`1,`3})">
            <summary>
            Called when a message is received on the second input.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4.OnNotify(`3)">
            <summary>
            Indicates that all messages bearing the given time (or earlier) have been delivered.
            </summary>
            <param name="time">The timestamp of the notification.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryBufferingVertex`4.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`3},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2}}})">
            <summary>
            Constructs a new BinaryBufferingVertex
            </summary>
            <param name="index">vertex index</param>
            <param name="stage">host stage</param>
            <param name="transformation">transformation from two input collections to an output collection</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry">
            <summary>
            Methods to instantiate stages based on factories.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry.NewSinkStage``2(Microsoft.Research.Naiad.Stream{``0,``1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{``1},Microsoft.Research.Naiad.Dataflow.StandardVertices.SinkVertex{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.String)">
            <summary>
            Creates a new stage with one input and no outputs.
            </summary>
            <typeparam name="TOutput">Source type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="source">Source of records</param>
            <param name="factory">Vertex factory</param>
            <param name="inputPartitionBy">Partitioning requirement</param>
            <param name="name">Descriptive name</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry.NewUnaryStage``3(Microsoft.Research.Naiad.Stream{``0,``2},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{``2},Microsoft.Research.Naiad.Dataflow.StandardVertices.UnaryVertex{``0,``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}},System.String)">
            <summary>
            Creates a stage with one input and one output.
            </summary>
            <typeparam name="TInput">Source type</typeparam>
            <typeparam name="TOutput">Result type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="source">Source of records</param>
            <param name="factory">Vertex factory</param>
            <param name="inputPartitionBy">Partitioning requirement</param>
            <param name="outputPartitionBy">Partitioning guarantee</param>
            <param name="name">Descriptive name</param>
            <returns>The stage's output</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry.NewBinaryStage``4(Microsoft.Research.Naiad.Stream{``0,``3},Microsoft.Research.Naiad.Stream{``1,``3},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{``3},Microsoft.Research.Naiad.Dataflow.StandardVertices.BinaryVertex{``0,``1,``2,``3}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}},System.Linq.Expressions.Expression{System.Func{``2,System.Int32}},System.String)">
            <summary>
            Creates a new stage with two inputs and one output
            </summary>
            <typeparam name="TInput1">First source type</typeparam>
            <typeparam name="TInput2">Second source type</typeparam>
            <typeparam name="TOutput">Result type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="source">First source of records</param>
            <param name="other">Second source of records</param>
            <param name="factory">Vertex factory</param>
            <param name="input1PartitionBy">First partitioning requirement</param>
            <param name="input2PartitionBy">Second partitioning requirement</param>
            <param name="outputPartitionBy">Partitioning guarantee</param>
            <param name="name">Descriptive name</param>
            <returns>The stage's output</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry.NewStage``2(Microsoft.Research.Naiad.Dataflow.TimeContext{``1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{``1},``0},System.String)">
            <summary>
            Creates a stage from a vertex factory
            </summary>
            <typeparam name="TVertex">Vertex type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="context">Time context</param>
            <param name="factory">Vertex factory</param>
            <param name="name">Descriptive name</param>
            <returns>Constructed stage</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry.NewStage``2(Microsoft.Research.Naiad.Dataflow.Placement,Microsoft.Research.Naiad.Dataflow.TimeContext{``1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{``1},``0},System.String)">
            <summary>
            Creates a stage from a vertex factory
            </summary>
            <typeparam name="TVertex">Vertex type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="placement">Placement</param>
            <param name="context">Time context</param>
            <param name="factory">Vertex factory</param>
            <param name="name">Descriptive name</param>
            <returns>Constructed stage</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.ExtensionMethods">
            <summary>
            Methods to create and apply LINQ expressions on a time-by-time basis.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.ExtensionMethods.UnaryExpression``3(Microsoft.Research.Naiad.Stream{``0,``2},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}}},System.String)">
            <summary>
            Constructs a stream from an input and a function to apply to collections on a time-by-time basis.
            </summary>
            <typeparam name="TInput">Input type</typeparam>
            <typeparam name="TOutput">Output type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="stream">input stream</param>
            <param name="keyFunction">partitioning requirement</param>
            <param name="transformation">collection transformation</param>
            <param name="name">descriptive name</param>
            <returns>a new stream representing independent application of transformation to each time in the input stream</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.StandardVertices.ExtensionMethods.BinaryExpression``4(Microsoft.Research.Naiad.Stream{``0,``3},Microsoft.Research.Naiad.Stream{``1,``3},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Linq.Expressions.Expression{System.Func{``1,System.Int32}},System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2}}},System.String)">
            <summary>
            Constructs a stream from two inputs and a function to apply to collections on a time-by-time basis.
            </summary>
            <typeparam name="TInput1">First input type</typeparam>
            <typeparam name="TInput2">Second input type</typeparam>
            <typeparam name="TOutput">Output type</typeparam>
            <typeparam name="TTime">Time type</typeparam>
            <param name="stream1">first input stream</param>
            <param name="stream2">second input stream</param>
            <param name="keyFunction1">first partitioning requirement</param>
            <param name="keyFunction2">second partitioning requirement</param>
            <param name="transformation">collection transformation</param>
            <param name="name">descriptive name</param>
            <returns>a new stream representing independent application of transformation to each time in the input streams</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.WorkerStartArgs">
            <summary>
            Arguments of the event that is raised when a worker starts.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.WorkerStartArgs.ThreadId">
            <summary>
            The worker thread that is starting.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.WorkerWakeArgs">
            <summary>
            Arguments of the event that is raised when a worker is woken from sleep.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.WorkerWakeArgs.ThreadId">
            <summary>
            The worker thread that is waking.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.WorkerSleepArgs">
            <summary>
            Arguments of the event that is raised when a worker goes to sleep.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.WorkerSleepArgs.ThreadId">
            <summary>
            The worker thread that is sleeping.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.WorkerTerminateArgs">
            <summary>
            Arguments of the event that is raised when a worker terminates.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.WorkerTerminateArgs.ThreadId">
            <summary>
            The worker thread that is terminating.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.VertexStartArgs">
            <summary>
            Arguments of the event that is raised when a vertex notification starts.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexStartArgs.ThreadId">
            <summary>
            The worker thread on which the vertex is starting.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexStartArgs.Stage">
            <summary>
            The stage of which the vertex is a member.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexStartArgs.VertexId">
            <summary>
            The ID of the vertex within its stage.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexStartArgs.Pointstamp">
            <summary>
            The pointstamp of the notification that is being delivered.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.VertexEndArgs">
            <summary>
            Arguments of the event that is raised when a vertex notification ends.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEndArgs.ThreadId">
            <summary>
            The worker thread on which the vertex is ending.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEndArgs.Stage">
            <summary>
            The stage of which the vertex is a member.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEndArgs.VertexId">
            <summary>
            The ID of the vertex within its stage.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEndArgs.Pointstamp">
            <summary>
            The pointstamp of the notification that was delivered.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.VertexEnqueuedArgs">
            <summary>
            Arguments of the event that is raised when a vertex notification is enqueued.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEnqueuedArgs.ThreadId">
            <summary>
            The worker thread on which the notification is being enqueued.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEnqueuedArgs.Stage">
            <summary>
            The stage of which the vertex is a member.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEnqueuedArgs.VertexId">
            <summary>
            The ID of the vertex within its stage.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.VertexEnqueuedArgs.Pointstamp">
            <summary>
            The pointstamp of the notification that was enqueued.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.VertexLocation">
            <summary>
            Describes the physical location of a dataflow <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.VertexLocation.VertexId">
            <summary>
            The vertex identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.VertexLocation.ProcessId">
            <summary>
            The process on which the vertex with <see cref="F:Microsoft.Research.Naiad.Dataflow.VertexLocation.VertexId"/> resides.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.VertexLocation.ThreadId">
            <summary>
            The worker thread on which the vertex with <see cref="F:Microsoft.Research.Naiad.Dataflow.VertexLocation.VertexId"/> resides.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.VertexLocation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new vertex location.
            </summary>
            <param name="vertexId">The vertex ID.</param>
            <param name="processId">The process ID.</param>
            <param name="threadId">The worker thread ID.</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Placement">
            <summary>
            Represents the placement of physical dataflow <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/> objects in a <see cref="T:Microsoft.Research.Naiad.Dataflow.Stage`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.GetEnumerator">
            <summary>
            Returns an object for enumerating location information about every vertex in this placement.
            </summary>
            <returns>An object for enumerating location information about every vertex in this placement.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.Equals(Microsoft.Research.Naiad.Dataflow.Placement)">
            <summary>
            Returns <c>true</c> if and only if each vertex in this placement has the same location as the vertex
            with the same ID in the <paramref name="other"/> placement, and vice versa.
            </summary>
            <param name="other">The other placement.</param>
            <returns><c>true</c> if and only if each vertex in this placement has the same location as the vertex
            with the same ID in the <paramref name="other"/> placement, and vice versa.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.Item(System.Int32)">
            <summary>
            Returns location information about the vertex with the given ID.
            </summary>
            <param name="vertexId">The vertex ID.</param>
            <returns>Location information about the vertex with the given ID.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.Count">
            <summary>
            The number of vertices.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Placement.RoundRobin">
            <summary>
            Round robin placement
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.RoundRobin.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="numProcs">number of processes</param>
            <param name="numThreads">number of threads per process</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.RoundRobin.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.RoundRobin.Equals(Microsoft.Research.Naiad.Dataflow.Placement)">
            <summary>
            Tests equality between placements
            </summary>
            <param name="that">other placement</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.RoundRobin.Count">
            <summary>
            Number of workers
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.RoundRobin.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="vertexId">vertex identifier</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex">
            <summary>
            Placement with one vertex
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="processId">process identifier for the vertex</param>
            <param name="threadId">thread identifier for the vertex</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns>an enumeration of the Placement's locations</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex.Equals(Microsoft.Research.Naiad.Dataflow.Placement)">
            <summary>
            Test equality with another SingleVertexPlacement
            </summary>
            <param name="that">placement to compare to</param>
            <returns>true if the placements are equal</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="vertexId">ignored</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertex.Count">
            <summary>
            Returns one
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Placement.Explicit">
            <summary>
            Represents a <see cref="T:Microsoft.Research.Naiad.Dataflow.Placement"/> based on an explicit <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>-to-location mapping.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.Explicit.GetEnumerator">
            <summary>
            Returns an object for enumerating location information about every vertex in this placement.
            </summary>
            <returns>An object for enumerating location information about every vertex in this placement.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.Explicit.Equals(Microsoft.Research.Naiad.Dataflow.Placement)">
            <summary>
            Returns <c>true</c> if and only if each vertex in this placement has the same location as the vertex
            with the same ID in the <paramref name="other"/> placement, and vice versa.
            </summary>
            <param name="other">The other placement.</param>
            <returns><c>true</c> if and only if each vertex in this placement has the same location as the vertex
            with the same ID in the <paramref name="other"/> placement, and vice versa.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.Explicit.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Research.Naiad.Dataflow.VertexLocation})">
            <summary>
            Constructs explicit placement from a sequence of <see cref="T:Microsoft.Research.Naiad.Dataflow.VertexLocation"/> objects.
            </summary>
            <param name="locations">The explicit locations of each vertex in this placement.</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.Explicit.Item(System.Int32)">
            <summary>
            Returns location information about the vertex with the given ID.
            </summary>
            <param name="vertexId">The vertex ID.</param>
            <returns>Location information about the vertex with the given ID.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.Explicit.Count">
            <summary>
            The number of vertices.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertexPerProcess">
            <summary>
            Placement with one vertex per process
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertexPerProcess.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="numProcs">number of processes</param>
            <param name="threadId">thread index for the vertex</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertexPerProcess.Equals(Microsoft.Research.Naiad.Dataflow.Placement)">
            <summary>
            Equals
            </summary>
            <param name="that">other placement</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertexPerProcess.GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertexPerProcess.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="vertexId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Placement.SingleVertexPerProcess.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.OneOffComputation">
            <summary>
            A Computation with an internal Controller which cannot be re-used for other Computations.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Computation">
            <summary>
            Manages the construction and execution of an individual dataflow computation.
            </summary>
            <remarks>
            A Computation manages the execution of a single Naiad computation.
            To construct an instance of this interface, use the
            <see cref="M:Microsoft.Research.Naiad.Controller.NewComputation"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Naiad.Computation.NewInput``1(Microsoft.Research.Naiad.Input.DataSource{``0})">
            <summary>
            Creates a new input stage from the given <see cref="T:Microsoft.Research.Naiad.Input.DataSource"/>.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="source">data source</param>
            <returns>A new input stage</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Computation.NewInput``1(Microsoft.Research.Naiad.Input.DataSource{``0},System.String)">
            <summary>
            Creates a new input stage from the given <see cref="T:Microsoft.Research.Naiad.Input.DataSource"/>.
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <param name="source">data source</param>
            <param name="name">name for the input</param>
            <returns>A new input stage</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Computation.Sync(System.Int32)">
            <summary>
            Blocks until all subscriptions have processed all inputs up to the supplied epoch.
            If the computation has no subscriptions, no synchronization occurs.
            </summary>
            <param name="epoch">The epoch.</param>
            <remarks>
            This method is commonly used along with <see cref="T:Microsoft.Research.Naiad.Input.BatchedDataSource`1"/> to
            process epochs of input data in batches, or with a bounded number of outstanding
            epochs.
            
            If the computation contains many inputs and outputs that are stimulated asynchronously,
            the <see cref="M:Microsoft.Research.Naiad.Subscription.Sync(System.Int32)"/> method provides a mechanism to synchronize on an individual 
            subscription.
            </remarks>
            <example>
            var source = new BatchedDataSource&lt;int&gt;();
            var subscription = computation.NewInput(source)
                                          /* ... */
                                          .Subscribe();
            
            for (int i = 0; i &lt; numEpochs; ++i)
            {
                source.OnNext(i);
                computation.Sync(i); // Alternatively subscription.Sync(i);
            }
            </example>
            <seealso cref="T:Microsoft.Research.Naiad.Input.BatchedDataSource`1"/>
            <seealso cref="M:Microsoft.Research.Naiad.Subscription.Sync(System.Int32)"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Computation.Join">
            <summary>
            Blocks until all computation in this graph has termintaed.
            </summary>        
            <remarks>
            This method must be called after calling <see cref="M:Microsoft.Research.Naiad.Computation.Activate"/> and before calling Dispose()
            or an error will be raised.
            </remarks>
            <example>
            The typical usage of Join is before the end of the <c>using</c> block for a
            Computation:
            <code>
            using (Computation computation = controller.NewComputation())
            {
                /* Dataflow graph defined here. */
                
                computation.Activate();
            
                /* Inputs supplied here. */
            
                computation.Join();
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Research.Naiad.Controller.NewComputation"/>
            <seealso cref="M:Microsoft.Research.Naiad.Computation.Join"/>
        </member>
        <member name="M:Microsoft.Research.Naiad.Computation.Activate">
            <summary>
            Starts computation in this graph.
            </summary>
            <remarks>
            This method must be called after the entire dataflow graph has been constructed, and before calling <see cref="M:Microsoft.Research.Naiad.Computation.Join"/>,
            or an error will be raised.
            </remarks>
            <example>
            The typical usage of Activate is between the definition of the dataflow graph and
            before inputs are supplied to the graph:
            <code>
            using (Computation computation = controller.NewComputation())
            {
                /* Dataflow graph defined here. */
                
                computation.Activate();
            
                /* Inputs supplied here. */
            
                computation.Join();
            }
            </code>
            </example>
            <see cref="M:Microsoft.Research.Naiad.Controller.NewComputation"/>
            <seealso cref="M:Microsoft.Research.Naiad.Computation.Activate"/>
        </member>
        <member name="E:Microsoft.Research.Naiad.Computation.OnFrontierChange">
            <summary>
            An event that is raised each time the frontier changes.
            </summary>
            <remarks>
            This event provides a hook for debugging statements that track the progress of
            a computation.
            </remarks>
            <example>
            computation.OnFrontierChange += (c, f) =>
                {
                    Console.WriteLine("New frontier: {0}", string.Join(", ", f.NewFrontier));
                };
            </example>
        </member>
        <member name="E:Microsoft.Research.Naiad.Computation.OnStartup">
            <summary>
            An event that is raised once the graph is started.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Naiad.Computation.OnShutdown">
            <summary>
            An event that is raised once the graph is shut down.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Computation.Controller">
            <summary>
            The <see cref="P:Microsoft.Research.Naiad.Computation.Controller"/> that hosts this graph.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.OneOffComputation.Configuration">
            <summary>
            The configuration used by this controller.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.OneOffComputation.WorkerGroup">
            <summary>
            The workers associated with this controller.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.OneOffComputation.DefaultPlacement">
            <summary>
            The default placement of new stages.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.InternalComputationState">
            <summary>
            The subgraph manager holds on to data related to a specific executable graph.
            Much of this functionality used to exist in the controller, but we extract out
            the 
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.BaseComputation.NewInput``1">
            <summary>
            Constructs and registers a new input collection of type R.
            </summary>
            <typeparam name="R">Record</typeparam>
            <returns>New input collection</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.BaseComputation.Join">
            <summary>
            Blocks until all computation is complete and resources are released.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.BaseComputation.Sync(System.Int32)">
            <summary>
            Blocks until all computation associated with the supplied epoch have been retired.
            </summary>
            <param name="epoch">Epoch to wait for</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion">
            <summary>
            Enumeration describing which aspect of a Naiad computation a tracing region corresponds to
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.Flush">
            <summary>
            Region corresponding to a flush
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.Send">
            <summary>
            Region corresponding to a send
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.BroadcastTCP">
            <summary>
            Region corresponding to a TCP message broadcast
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.BroadcastUDP">
            <summary>
            Region corresponding to a UDP message broadcast
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.Reachability">
            <summary>
            Region corresponding to a reachability computation
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.Compile">
            <summary>
            Region corresponding to codegen
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.Wakeup">
            <summary>
            Region corresponding to waking up dormant workers
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.SetEvent">
            <summary>
            Region corresponding to setting events to wake up dormant workers
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.NaiadTracingRegion.Unspecified">
            <summary>
            Unclassifed region
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.NaiadTracing">
            <summary>
            ETW provider for Naiad 
            GUID is 0ad7158e-b717-53ae-c71a-6f41ab15fe16
            </summary>
            
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.MsgSend(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates an ETW event for message send.
            Does nothing if there is no listener for the Network or Viz keywords of the NaiadTracing provider.
            <param name="channel">Id of the channel the message is sent on</param>
            <param name="seqno">Sequence number in the message header</param>
            <param name="len">Length value in the message header</param>
            <param name="src">Source vertex id</param>
            <param name="dst">Destination vertex id</param>
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.MsgRecv(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates an ETW event for message receive.
            Does nothing if there is no listener for the Network or Viz keywords of the NaiadTracing provider.
            <param name="channel">Id of the channel the message is received on</param>
            <param name="seqno">Sequence number in the message header</param>
            <param name="len">Length value in the message header</param>
            <param name="src">Source vertex id</param>
            <param name="dst">Destination vertex id</param>
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.StartSched(Microsoft.Research.Naiad.Scheduling.Scheduler.WorkItem)">
            <summary>
            Generates an ETW event for the scheduling of a work item.
            Does nothing if there is no listener for the Viz keyword of the NaiadTracing provider.
            </summary>
            <param name="workitem">Item being scheduled</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.StopSched(Microsoft.Research.Naiad.Scheduling.Scheduler.WorkItem)">
            <summary>
            Generates an ETW event for the end of a scheduling period of a work item.
            Does nothing if there is no listener for the Viz keyword of the NaiadTracing provider.
            </summary>
            <param name="workitem">Item being descheduled</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.AdvanceFrontier(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp[])">
            <summary>
            Generates an ETW event for frontier advance.
            Does nothing if there is no listener for the Viz keyword of the NaiadTracing provider.
            </summary>
            <param name="frontier">The new PCS frontier</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.VertexPlacement(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Posts an event describing the placement of a vertex
            </summary>
            <param name="stageid">Stage id</param>
            <param name="vertexid">Vertex id</param>
            <param name="proc">Naiad process id</param>
            <param name="worker">Worker thread id</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.ChannelInfo(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Posts channel info metadata event
            </summary>
            <param name="channel">Channel id</param>
            <param name="src">Source stage id</param>
            <param name="dst">Destination stage id</param>
            <param name="isExchange">True if an exchange channel (otherwise a pipeline channel)</param>
            <param name="isProgress">True if a progress channel (otherwise a data channel)</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.ThreadName(System.String,System.Object[])">
            <summary>
            Posts a friendly name for the calling thread.
            Note that this tracing event is not conditionally compiled because we want these events to appear
            even when not tracing Naiad specifically.
            </summary>
            <param name="name">Name for this thread (usually to be displayed in a visualization of the trace)</param>
            <param name="args">Any formatting args</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.ProcessInfo(System.Int32,System.String)">
            <summary>
            Posts the Naiad process id and the name of the local machine.
            </summary>
            <param name="id">Naiad process id</param>
            <param name="name">Local machine name</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.DumpManifestToFile(System.String)">
            <summary>
            Writes the XML manifest of the Naiad ETW provider to a file.
            This method is not thread-safe, but will catch exceptions and do nothing.
            </summary>
            <param name="filename">File to write to</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            DIY versions of WriteEvent to avoid the slow path.
            See http://msdn.microsoft.com/en-us/library/system.diagnostics.tracing.eventsource.writeeventcore(v=vs.110).aspx.
            </summary>
            <param name="eventId"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.Tasks">
            <summary>
            Identifies the Naiad subsystem the event pertains to
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.NaiadTracing.Keywords">
            <summary>
            Defines logical groups of events that can be turned on and off independently
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.KernelLoggerTracing">
            <summary>
            This class containes methods that allow Mark events to be posted in the ETW Kernel Logger session.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.KernelLoggerTracing.TraceProducer(System.Byte[])">
            <summary>
            Message producer ETW event.
            Generates mark event containing the character '+' followed by a 64-bit key constructed from the arguments.
            Post-processing (eg by ViewEtl) will use the key to match message producer and consumer events.
            </summary>
            <param name="args">Array of bytes, must be size 8</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.KernelLoggerTracing.TraceConsumer(System.Byte[])">
            <summary>
            Message consumer ETW event.
            Generates mark event containing the character '-' followed by a 64-bit key constructed from the arguments.
            Post-processing (eg by ViewEtl) will use the key to match message producer and consumer events.
            </summary>
            <param name="args">Array of bytes, must be size 8</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.KernelLoggerTracing.PostKernelLoggerMarkEvent(System.String,System.Object[])">
            <summary>
            Formats and then writes a freetext Mark event into the ETW Kernel Logger trace session.
            This event is expensive and should be used sparingly.
            </summary>
            <param name="msg">The format string to be logged, as in String.Format</param>
            <param name="args">Arguments to be formatted.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.KernelLoggerTracing.PostKernelLoggerMarkEvent(System.String)">
            <summary>
            Writes a freetext Mark event into the ETW Kernel Logger trace session.
            This event is expensive and should be used sparingly.
            </summary>
            <param name="msg">message</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.Serializers">
            <summary>
            Serializer implementations for primitive types.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Byte[])">
            <summary>
            Attempts to serialize the given array to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="array">The array to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Single[])">
            <summary>
            Attempts to serialize the given array to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="array">The array to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Int32[])">
            <summary>
            Attempts to serialize the given array to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="array">The array to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.String)">
            <summary>
            Attempts to serialize the given string to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The string to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Int64)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.UInt64)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Int16)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Int32)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.UInt32)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Boolean)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Byte)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Double)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Serializers.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte},System.Single)">
            <summary>
            Attempts to serialize the given value to the given target buffer.
            </summary>
            <param name="target">The target buffer.</param>
            <param name="source">The value to be serialized.</param>
            <returns>The original target buffer if serialization failed, otherwise the updated target buffer.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.Deserializers">
            <summary>
            Deserializer implementations for primitive types.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Boolean@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Byte@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Char@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Int16@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Int32@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.UInt32@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Int64@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.UInt64@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Single@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Double@)">
            <summary>
            Attempts to deserialize a value from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized value, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.String@)">
            <summary>
            Attempts to deserialize a string from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized string, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Byte[]@)">
            <summary>
            Attempts to deserialize an array from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized array, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Int32[]@)">
            <summary>
            Attempts to deserialize an array from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized array, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.Deserializers.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.Single[]@)">
            <summary>
            Attempts to deserialize an array from the given source buffer.
            </summary>
            <param name="source">The target buffer. In the event of success, the current position of the buffer will be advanced.</param>
            <param name="value">The deserialized array, if this method returns true.</param>
            <returns>True if deserialization succeeded, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Utilities.ExpressionComparer">
            <summary>
            Compares expressions
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Utilities.ExpressionComparer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Utilities.ExpressionComparer.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Compares two expressions for equality.
            </summary>
            <param name="left">first expression</param>
            <param name="right">second expression</param>
            <returns>true iff expressions are identical</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Utilities.ExpressionComparer.Instance">
            <summary>
            Static instance to use.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NaiadServer.RegisterServerAction(Microsoft.Research.Naiad.Runtime.Networking.NaiadProtocolOpcode,System.Action{System.Net.Sockets.Socket},System.Boolean)">
            <summary>
            Registers an Action that will be called when a connection is made with the given opcode.
            
            The Action receives the socket for the accepted connection, and is responsible for managing that
            resource by e.g. closing it.
            
            This method must be called before a call to Start();
            </summary>
            <param name="opcode">The opcode to handle.</param>
            <param name="serverAction">The Action to execute when this opcode is received.</param>
            <param name="mustGuard">If true, the execution will be guarded.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NaiadServer.BindSocket(System.Net.IPEndPoint@)">
            <summary>
            Binds the server socket to an available port.
            </summary>
            <param name="endpoint">If this parameter is not null, try to listen on this endpoint, otherwise one will be picked arbitrarily.</param>
            <returns>The bound socket.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NaiadServer.Start">
            <summary>
            Starts the server accepting connections. To stop the server, call <see cref="M:Microsoft.Research.Naiad.Runtime.Networking.NaiadServer.Stop"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Networking.NaiadServer.ThreadStart">
            <summary>
            Accept loop thread. Implements protocol operation demuxing, based on a 4-byte opcode, in the first 4 bytes received
            from the accept()'ed socket.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.ReturnAddress">
            <summary>
            Describes the origin of a message
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.ReturnAddress.ThreadIndex">
            <summary>
            Process-local thread identifier of the sender
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.ReturnAddress.VertexID">
            <summary>
            Vertex identifier of the sender
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.ReturnAddress.ProcessID">
            <summary>
            Process identifier of the sender
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.ReturnAddress.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a return address from process and vertex identifiers
            </summary>
            <param name="processId">process identifier</param>
            <param name="vertexId">vertex identifier</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.ReturnAddress.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a return address from process, vertex, thread identifiers
            </summary>
            <param name="processId">process identifier</param>
            <param name="vertexId">vertex identifier</param>
            <param name="threadIndex">thread identifier</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.Postbox`2.Flush">
            <summary>
            Flushes the mailboxes and makes sure the scheduler knows about the latest counts
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.BufferingPostbox`2.Flush">
            <summary>
            Flushes the mailboxes and makes sure the scheduler knows about the latest counts
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.postOffice">
            <summary>
            The PostOffice responsible for this mailbox.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.Drain">
            <summary>
            Move records from the private queue into the operator state by giving them to the endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.Flush">
            <summary>
            Flush the target of the channel, and then any buffered progress updates.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.DeliverSerializedMessage(Microsoft.Research.Naiad.Serialization.SerializedMessage,Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Enqueues the incoming network message on the shared queue, called by the network channel.
            </summary>
            <param name="message">message</param>
            <param name="from">sender</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.RequestFlush(Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Flushes the queue of local messages.  
            Called by the postbox.
            </summary>
            <param name="from">Identity of the upstream postbox</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.Send(Microsoft.Research.Naiad.Dataflow.Message{`0,`1},Microsoft.Research.Naiad.Dataflow.ReturnAddress)">
            <summary>
            Forwards a local message by moving it to the shared queue.  This makes the message visible to the receiver.
            </summary>
            <param name="message">message of data</param>
            <param name="from">information about calling thread</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.#ctor(Microsoft.Research.Naiad.Dataflow.Channels.PostOffice,Microsoft.Research.Naiad.Dataflow.VertexInput{`0,`1},System.Int32,System.Int32,Microsoft.Research.Naiad.Runtime.Progress.ProgressUpdateBuffer{`1})">
            <summary>
            Constructs a new Mailbox for a local instance of a vertex.
            </summary>
            <param name="postOffice">PostOffice managing this Mailbox</param>
            <param name="endpoint">target for delivered messages</param>
            <param name="channelId">identifier for the channel</param>
            <param name="vertexId">identifier for tthe target vertex</param>
            <param name="progressBuffer">accumulator for progress updates</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.ChannelId">
            <summary>
            Reports the identifier associated with the channel.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.VertexId">
            <summary>
            Reports the identifier associated with the target vertex.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.GraphId">
            <summary>
            Reports the identifier associated with the containing computation.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Channels.LocalMailbox`2.ThreadIndex">
            <summary>
            Reports the identifier associated with the scheduler responsible for the target vertex.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.NaiadSerialization`1">
            <summary>
            Represents a serializer and deserializer for a particular element type.
            </summary>
            <typeparam name="TElement">The type of elements handled by this object.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadSerialization`1.Serialize(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte}@,`0)">
            <summary>
            Attempts to serialize the given element into the given destination buffer.
            </summary>
            <param name="destination">The destination buffer.</param>
            <param name="value">The element to serialize.</param>
            <returns>True if the serialization was successful, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadSerialization`1.TrySerializeMany(Microsoft.Research.Naiad.Serialization.SubArray{System.Byte}@,System.ArraySegment{`0})">
            <summary>
            Attempts to serialize the given contiguous array segment of elements into the given destination buffer.
            </summary>
            <param name="destination">The destination buffer.</param>
            <param name="values">The elements to serialize.</param>
            <returns>The count of elements successfully serialized.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadSerialization`1.TryDeserialize(Microsoft.Research.Naiad.Serialization.RecvBuffer@,`0@)">
            <summary>
            Attempts to deserialize an element from the given source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="value">The deserialized element, if the method returns true.</param>
            <returns>True if deserialization was successful, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.NaiadSerialization`1.TryDeserializeMany(Microsoft.Research.Naiad.Serialization.RecvBuffer@,System.ArraySegment{`0})">
            <summary>
            Attempts to deserialize several elements from the given source buffer into the given contiguous
            array segment.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="target">An array segment to be populated with the deserialized elements.</param>
            <returns>The count of elements successfully deserialized.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.SerializationFormat">
            <summary>
            Represents a particular format for serialization and deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SerializationFormat.GetSerializer``1">
            <summary>
            Returns a serializer and deserializer for a particular element type.
            </summary>
            <typeparam name="TElement">The type of elements to be serialized and/or deserialized.</typeparam>
            <returns>A serializer and deserializer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SerializationFormat.GetSerializationForMinorVersion``1(System.Int32)">
            <summary>
            Returns a serializer and deserializer for a particular element type, using a specific
            minor version of the serialization format.
            
            N.B. The minor version must be less than or equal to the <see cref="P:Microsoft.Research.Naiad.Serialization.SerializationFormat.MinorVersion"/> of
                 this object.
            </summary>
            <typeparam name="TElement">The type of elements to be serialized and/or deserialized.</typeparam>
            <param name="minorVersion">The minor version of the serialization format to use.</param>
            <returns>A serializer and deserializer.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SerializationFormat.RegisterCustomSerialization``2">
            <summary>
            Registers the methods of <typeparamref name="TSerializer"/> type as custom serialization and deserialization methods
            for elements of type <typeparamref name="TElement"/>.
            </summary>
            <remarks>This must be invoked before the first <see cref="T:Microsoft.Research.Naiad.Computation"/> is activated.</remarks>
            <typeparam name="TElement">The type of element to be serialized or deserialized.</typeparam>
            <typeparam name="TSerializer">The type of the custom serializer.</typeparam>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.SerializationFormat.MajorVersion">
            <summary>
            The major version of the serialization format. Different major versions may not be compatible with each other.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.SerializationFormat.MinorVersion">
            <summary>
            The minor version of the serialization format. An implementation of a particular major and minor version must support
            backwards compatibility with all serializers of the same major version and earlier minor versions.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.CustomSerialization">
            <summary>
            Static factory class for making custom serializers
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CustomSerialization.MakeSerializer``2">
            <summary>
            Make a Naiad serializer for a given type and custom serializer type with an argument-less constructor
            </summary>
            <typeparam name="TElement">Record type to serialize</typeparam>
            <typeparam name="TCustomSerialization">Custom serializer type</typeparam>
            <returns>Naiad serializer</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.CustomSerialization.MakeSerializer``2(``1)">
            <summary>
            Make a Naiad serializer for a given type and custom serializer
            </summary>
            <typeparam name="TElement">Record type to serialize</typeparam>
            <typeparam name="TCustomSerialization">Custom serializer type</typeparam>
            <param name="instance">Custom serializer</param>
            <returns>Naiad serializer</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.AutoSerialization">
            <summary>
            Factory class for serialization code generators.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.AutoSerialization.InlineNaiadSerializationCodeGenerator.AddAssembliesForGenericParameters(System.Type)">
            <summary>
            Recursively enumerates the parameters of a generic type, and adds their assemblies
            as dependencies for the generated code.
            </summary>
            <param name="t">The type whose generic parameters are to be evaluated.</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.AutoSerialization.NaiadSerializationCodeGenerator">
            <summary>
            Code generation logic for the serialization of a single type.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Configuration">
            <summary>
            Configuration information
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Configuration.Usage">
            <summary>
            Prints information about the standard Naiad command-line options, which are used to build
            a configuration in Configuration.FromArgs().
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Configuration.BuildFromArguments(System.String[],System.String[]@)">
            <summary>
            Builds a Naiad configuration from the given command-line arguments, interpreting them according to
            the output of Configuration.Usage().
            </summary>
            <param name="args">The command-line arguments.</param>
            <param name="strippedArgs">The command-line arguments with Naiad-specific arguments removed.</param>
            <returns>A new <see cref="T:Microsoft.Research.Naiad.Configuration"/> based on the given arguments.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Configuration.FromArgs(System.String[]@)">
            <summary>
            Builds a Naiad configuration from the given command-line arguments, interpreting them according to
            the output of Configuration.Usage().
            </summary>
            <param name="args">The command-line arguments, which will have Naiad-specific arguments removed.</param>
            <returns>A new <see cref="T:Microsoft.Research.Naiad.Configuration"/> based on the given arguments.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.SendBufferPolicy">
            <summary>
            Defines how the buffer pool is divided
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.SendPageCount">
            <summary>
            Number of pages used for sending network data
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.SendPageSize">
            <summary>
            Size in bytes of pages used for sending network data
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.ProcessID">
            <summary>
            The ID of the local process in this computation (starting at 0).
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.Processes">
            <summary>
            The number of processes in this computation.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.WorkerCount">
            <summary>
            The number of workers (i.e. CPUs used) in the local process.
            
            N.B. At present, all processes in a computation must use the same worker count.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.ReadEndpointsFromPPM">
            <summary>
            Setting this to true causes the server to assume it has been spawned by a Peloponnese manager, and
            contact the manager to find out the endpoints of the other processes in the system
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.Endpoints">
            <summary>
            The network addresses of the processes in this computation, indexed by process ID.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.CompactionInterval">
            <summary>
            The periodic interval in milliseconds at which Naiad will attempt to compact its collection state.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.DeadlockTimeout">
            <summary>
            Setting this to a value other than Timeout.Infinite will cause Naiad to print diagnostic information
            after a process sleeps for that number of milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.MultipleLocalProcesses">
            <summary>
            Setting this to true ensures that, if cores are pinned to CPUs, subsequent processes are pinned to different
            sets of CPUs.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.DistributedProgressTracker">
            <summary>
            EXPERIMENTAL: Setting this to true enables the (original) distributed progress tracker.  Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.DuplexSockets">
            <summary>
            If true, uses the same socket for sending and receiving data.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.Nagling">
            <summary>
            If true, uses Nagling on sockets
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.KeepAlives">
            <summary>
            If true, enable TCP KeepAlives on sockets
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.DontUseHighPriorityQueue">
            <summary>
            If true, don't use the high priority queue for progress traffic
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.DomainReporting">
            <summary>
            Enables a reporting graph manager. In the future this is intended to be used for logging messages that
            are aggregated according to real time, though for now it is mostly vestigial. Calling Log(string) on the
            reporter at a vertex will only deliver the messages to a central location if domain reporting is enabled.
            Messages are all written to a file called rtdomain.txt at the root vertex's computer.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.InlineReporting">
            <summary>
            Enables inline reporting in the user graph domain. This is used for logging messages that are aggregated
            according to logical times, e.g. to discover the number of messages written by a stage during a particular
            loop iteration, or epoch. Calling Log(string,time) on the reporter at a vertex will only deliver the messages
            to a central location if domain reporting is enabled. Messages are all written to a file called rtinline.txt
            at the root vertex's computer.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.AggregateReporting">
            <summary>
            Enables aggregation in inline reporting in the graph manager domain. Calling LogAggregate(...) on the reporter at a
            vertex will only aggregate and log messages if both InlineReporting and AggregateReporting are true. Aggregates
            are written to the rtinline.txt file at the root vertex's computer.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.Broadcast">
            <summary>
            The network protocol to be used for broadcasting control messages.
            
            N.B. Support for TcpUdp and UdpOnly is experimental. The BroadcastAddress must be set to use these modes.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.SerializerVersion">
            <summary>
            Version information about serialization format
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.UseInlineSerialization">
            <summary>
            Uses a new code generation technique to generate more efficient code for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.BroadcastAddress">
            <summary>
            The address and port to be used for sending or receiving broadcast control messages.
            
            N.B. Support for broadcast primitives is experimental. This must be set to use the TcpUdp and UdpOnly broadcast protocols.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.UseBroadcastWakeup">
            <summary>
            Uses optimization to wake multiple threads with a single kernel event.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.UseNetworkBroadcastWakeup">
            <summary>
            Uses optimization to wake multiple networking threads with a single kernel event.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Configuration.AdditionalSettings">
            <summary>
            Collection of application-specific settings.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Configuration.BroadcastProtocol">
            <summary>
            Network protocol used to broadcast progress updates
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Configuration.BroadcastProtocol.TcpOnly">
            <summary>
            Use TCP only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Configuration.BroadcastProtocol.UdpOnly">
            <summary>
            Use UDP only; non-functional unless UDP is lossless.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Configuration.BroadcastProtocol.TcpUdp">
            <summary>
            Use both TCP and UDP.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Configuration.SendBufferMode">
            <summary>
            Level of pooling used for network send buffers
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Configuration.SendBufferMode.Global">
            <summary>
            Use a single pool for all connections.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Configuration.SendBufferMode.PerRemoteProcess">
            <summary>
            Use one pool for each connection.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Configuration.SendBufferMode.PerWorker">
            <summary>
            Use one pool for each worker in this process.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.SubArray`1">
            <summary>
            Represents a growable segment of an array, used for serialization.
            </summary>
            <typeparam name="TElement">The type of elements.</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SubArray`1.Array">
            <summary>
            The array instance that backs this subarray.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.SubArray`1.Count">
            <summary>
            The number of elements that have been written into this subarray.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SubArray`1.#ctor(`0[])">
            <summary>
            Constructs a new empty subarray that can grow to the full size of the given array.
            </summary>
            <param name="array">The array that backs this subarray.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SubArray`1.#ctor(`0[],System.Int32)">
            <summary>
            Constructs a new subarray that contains an initial number of elements and can grow to the full size
            of the given array.
            </summary>
            <param name="array">The array that backs this subarray.</param>
            <param name="initialCount">The initial number of elements in this subarray.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Serialization.SubArray`1.EnsureAvailable(System.Int32)">
            <summary>
            Returns true if the given number of elements is available in this subarray.
            </summary>
            <param name="numElements">The number of elements.</param>
            <returns>True if the given number of elements is available in this subarray, otherwise false.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.SubArray`1.Length">
            <summary>
            The total number of (occupied and unoccupied) elements in this subarray.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.SubArray`1.Item(System.Int32)">
            <summary>
            The element of this subarray at the given index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element of this subarray at the given index.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.SubArray`1.Available">
            <summary>
            The number of unoccupied elements in this subarray.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Serialization.RecvBuffer">
            <summary>
            Represents a growable segment of an array, used for deserialization.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.RecvBuffer.Buffer">
            <summary>
            The array that backs this buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.RecvBuffer.End">
            <summary>
            The offset (in the backing array) of the first byte after the end of this buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Serialization.RecvBuffer.CurrentPos">
            <summary>
            The current offset in the backing array.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Serialization.RecvBuffer.Available">
            <summary>
            The number of bytes that have not been consumed from this buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Time`1">
            <summary>
            Represents a logical timestamp in a timely dataflow computation. All messages in a
            timely dataflow computation are labeled with a logical timestamp.
            </summary>
            <remarks>
            This interface and its concrete implementations <see cref="T:Microsoft.Research.Naiad.Dataflow.Epoch"/> and <see cref="T:Microsoft.Research.Naiad.Dataflow.IterationIn`1"/> are the typed equivalent of the <see cref="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.Timestamp"/> field,
            corresponding to a sequence of integers.
            </remarks>
            <seealso cref="T:Microsoft.Research.Naiad.Dataflow.Epoch"/>
            <seealso cref="T:Microsoft.Research.Naiad.Dataflow.IterationIn`1"/>
            <typeparam name="TTime">The concrete type of the timestamp.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Time`1.GetHashCode">
            <summary>
            Returns a hashcode for this time.
            </summary>
            <returns>Returns a hashcode for this time.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Time`1.LessThan(`0)">
            <summary>
            Returns <c>true</c> if and only if this time is less than or equal to the <paramref name="other"/>
            time, according to the partial order defined on those times.
            </summary>
            <param name="other">The other time.</param>
            <returns><c>true</c> if and only if <c>this</c> is less than or equal to <c>other</c>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Time`1.Join(`0)">
            <summary>
            Computes the least upper bound of this and <paramref name="other"/>, according to the
            partial order defined on those times.
            </summary>
            <param name="other">The other time.</param>
            <returns>The least upper bound of the two times.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Time`1.Meet(`0)">
            <summary>
            Computes the greatest lower bound of this and <paramref name="other"/>, according to the
            partial order defined on those times.
            </summary>
            <param name="other">The other time.</param>
            <returns>The greatest lower bound of the two times.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Time`1.Populate(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp@)">
            <summary>
            Populates a <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> from a typed timestamp.
            </summary>
            <param name="pointstamp">The <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> to be populated.</param>
            <returns>The number of coordinates populated.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Time`1.InitializeFrom(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp,System.Int32)">
            <summary>
            Returns a timestamp initialized from the given <paramref name="pointstamp"/>.
            </summary>
            <param name="pointstamp">The pointstamp.</param>
            <param name="length">The number of coordinates to use.</param>
            <returns>The initialized timestamp.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Time`1.Coordinates">
            <summary>
            The number of integer coordinates in timestamps of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Empty">
            <summary>
            Represents a non-varying logical time.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Empty.zero">
            <summary>
            A dummy value, for compatibility with the current serializer.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.Join(Microsoft.Research.Naiad.Dataflow.Empty)">
            <summary>
            Returns an empty time.
            </summary>
            <param name="other">The other time.</param>
            <returns>An empty time.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.Meet(Microsoft.Research.Naiad.Dataflow.Empty)">
            <summary>
            Returns an empty time.
            </summary>
            <param name="other">The other time.</param>
            <returns>An empty time.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.Populate(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp@)">
            <summary>
            Populates a <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> with an empty timestamp.
            </summary>
            <param name="pointstamp">The <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> to be populated.</param>
            <returns>The number of coordinates populated (i.e. zero).</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.InitializeFrom(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp,System.Int32)">
            <summary>
            Returns an empty time.
            </summary>
            <param name="pointstamp">Ignored.</param>
            <param name="length">Ignored.</param>
            <returns>An empty time.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.GetHashCode">
            <summary>
            GetHashCode override
            </summary>
            <returns>zero</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.Equals(Microsoft.Research.Naiad.Dataflow.Empty)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="other">The other time.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.CompareTo(Microsoft.Research.Naiad.Dataflow.Empty)">
            <summary>
            Returns <c>0</c>.
            </summary>
            <param name="other">The other time.</param>
            <returns>0</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Empty.LessThan(Microsoft.Research.Naiad.Dataflow.Empty)">
            <summary>
            Returns <c>true</c>.
            </summary>
            <param name="other">The other time.</param>
            <returns><c>true</c></returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Empty.Coordinates">
            <summary>
            The number of integer coordinates in timestamps of this type (i.e. zero).
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Epoch">
            <summary>
            Represents the logical timestamp in a streaming context.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Epoch.epoch">
            <summary>
            The integer epoch ID.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.LessThan(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            Returns <c>true</c> if and only if this epoch is less than or equal to the <paramref name="other"/>
            epoch.
            </summary>
            <param name="other">The other epoch.</param>
            <returns><c>true</c> if and only if <c>this</c> is less than or equal to <c>other</c>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.Equals(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            Returns <c>true</c> if and only if this epoch is equal to the <paramref name="other"/>
            epoch.
            </summary>
            <param name="other">The other epoch.</param>
            <returns><c>true</c> if and only if <c>this</c> is equal to <c>other</c>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.CompareTo(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            Compares this epoch with the <paramref name="other"/> epoch.
            </summary>
            <param name="other">The other epoch.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.Join(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            Returns the later of this and the <paramref name="other"/> epochs.
            </summary>
            <param name="other">The other epoch.</param>
            <returns>The later of this and the <paramref name="other"/> epochs.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.Meet(Microsoft.Research.Naiad.Dataflow.Epoch)">
            <summary>
            Returns the earlier of this and the <paramref name="other"/> epochs.
            </summary>
            <param name="other">The other epoch.</param>
            <returns>The earlier of this and the <paramref name="other"/> epochs.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.ToString">
            <summary>
            Returns a string representation of this epoch.
            </summary>
            <returns>A string representation of this epoch.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.GetHashCode">
            <summary>
            Returns a hashcode for this epoch.
            </summary>
            <returns>A hashcode for this epoch.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.Populate(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp@)">
            <summary>
            Populates a <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> from this epoch.
            </summary>
            <param name="pointstamp">The <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> to be populated.</param>
            <returns>The number of coordinates populated (i.e. one).</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.#ctor(System.Int32)">
            <summary>
            Constructs new Epoch from the given integer ID.
            </summary>
            <param name="epoch">The integer epoch ID.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Epoch.InitializeFrom(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp,System.Int32)">
            <summary>
            Returns an epoch initialized from the given <paramref name="pointstamp"/>.
            </summary>
            <param name="pointstamp">The pointstamp.</param>
            <param name="length">The number of coordinates to use, which should be <c>1</c>.</param>
            <returns>The initialized epoch.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Epoch.Coordinates">
            <summary>
            The number of integer coordinates in timestamps of this type (i.e. one).
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.IterationIn`1">
            <summary>
            Represents the logical timestamp containing a loop counter nested within another logical <typeparamref name="TTime"/> context.
            </summary>
            <typeparam name="TTime">The type of the outer timestamp.</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.IterationIn`1.outerTime">
            <summary>
            The outer time.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.IterationIn`1.iteration">
            <summary>
            The loop counter.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.CompareTo(Microsoft.Research.Naiad.Dataflow.IterationIn{`0})">
            <summary>
            Compares this timestamp with the <paramref name="other"/> timestamp.
            </summary>
            <param name="other">The other timestamp.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.Equals(Microsoft.Research.Naiad.Dataflow.IterationIn{`0})">
            <summary>
            Returns <c>true</c> if and only if this timestamp is equal to the <paramref name="other"/>
            timestamp.
            </summary>
            <param name="other">The other timestamp.</param>
            <returns><c>true</c> if and only if <c>this</c> is equal to <c>other</c>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.LessThan(Microsoft.Research.Naiad.Dataflow.IterationIn{`0})">
            <summary>
            Returns <c>true</c> if and only if this timestamp is less than or equal to the <paramref name="other"/>
            timestamp.
            </summary>
            <param name="other">The other timestamp.</param>
            <returns><c>true</c> if and only if <c>this</c> is less than or equal to <c>other</c>.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.ToString">
            <summary>
            Returns a string representation of this timestamp.
            </summary>
            <returns>A string representation of this timestamp.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.GetHashCode">
            <summary>
            Returns a hashcode for this epoch.
            </summary>
            <returns>A hashcode for this epoch.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.Populate(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp@)">
            <summary>
            Populates a <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> from this timestamp.
            </summary>
            <param name="pointstamp">The <see cref="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp"/> to be populated.</param>
            <returns>The number of coordinates populated.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.Join(Microsoft.Research.Naiad.Dataflow.IterationIn{`0})">
            <summary>
            Returns the later of this and the <paramref name="other"/> timestamps.
            </summary>
            <param name="other">The other timestamp.</param>
            <returns>The later of this and the <paramref name="other"/> timestamps.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.Meet(Microsoft.Research.Naiad.Dataflow.IterationIn{`0})">
            <summary>
            Returns the earlier of this and the <paramref name="other"/> timestamps.
            </summary>
            <param name="other">The other timestamps.</param>
            <returns>The earlier of this and the <paramref name="other"/> timestamps.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.#ctor(`0,System.Int32)">
            <summary>
            Constructs a new timestamp from an outer time and the given loop counter.
            </summary>
            <param name="outerTime">The outer time.</param>
            <param name="iteration">The loop counter.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.IterationIn`1.InitializeFrom(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp,System.Int32)">
            <summary>
            Returns a timestamp initialized from the given <paramref name="pointstamp"/>.
            </summary>
            <param name="pointstamp">The pointstamp.</param>
            <param name="length">The number of coordinates to use.</param>
            <returns>The initialized epoch.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.IterationIn`1.Coordinates">
            <summary>
            The number of integer coordinates in timestamps of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.LoggingLevel">
            <summary>
            Indicates the level of logging reported
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingLevel.Debug">
            <summary>
            Anything at all.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingLevel.Info">
            <summary>
            Any information deemed interesting.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingLevel.Progress">
            <summary>
            Any indication of progress.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingLevel.Error">
            <summary>
            Only error messages.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingLevel.Fatal">
            <summary>
            Only fatal messages.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingLevel.Off">
            <summary>
            No logging reported.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.LoggingStyle">
            <summary>
            Where the log data is recorded
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingStyle.File">
            <summary>
            To a file.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.LoggingStyle.Console">
            <summary>
            To the console.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Diagnostics.Logging">
            <summary>
            Methods and properties related to logging
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Diagnostics.Logging.LogStyle">
            <summary>
            Intended logging target
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.flush">
            <summary>
            Flushes the log and clears the buffer.  Caller holds the lock.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.initFileLogging">
            <summary>
            Initialises file logging. 
            </summary>
            <returns>True if initialization actually happened.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.stopFileLogging">
            <summary>
            Stops file logging cleanly by flushing the buffer, closing the log FileStream
            and setting logging to be uninitialized.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.InspectBuffer">
            <summary>
            Method to enable inspection of buffer contents from the debugger.
            When in a breakpoint, invoke this method from the Immediate window
            and then look at the buffer by typing "NaiadLog.buf"
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Stop">
            <summary>
            Stops logging cleanly.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Debug(System.String,System.Object[])">
            <summary>
            Logs a format string and arguments at Debug level
            </summary>
            <param name="msg">format string</param>
            <param name="args">argument list</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Info(System.String,System.Object[])">
            <summary>
            Logs a format string and arguments at Info level
            </summary>
            <param name="msg">format string</param>
            <param name="args">argument list</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Progress(System.String,System.Object[])">
            <summary>
            Logs a format string and arguments at Progress level
            </summary>
            <param name="msg">format string</param>
            <param name="args">argument list</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Error(System.String,System.Object[])">
            <summary>
            Logs a format string and arguments at Error level
            </summary>
            <param name="msg">format string</param>
            <param name="args">argument list</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Fatal(System.String,System.Object[])">
            <summary>
            Logs a format string and arguments at Fatal level
            </summary>
            <param name="msg">format string</param>
            <param name="args">argument list</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Log(Microsoft.Research.Naiad.Diagnostics.LoggingLevel,System.String,System.Object[])">
            <summary>
            Writes a freetext log entry according to the current LoggingStyle.
            Returns immediately if logging is not initialized or not enabled.
            </summary>
            <param name="level">The log level for this message.  Messages below LogLevel are ignored.</param>
            <param name="msg">The format string to be logged, as in String.Format</param>
            <param name="args">Arguments to be formatted.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Assert(System.Boolean)">
            <summary>
            Logs an Error level message if condition is not true.
            </summary>
            <param name="condition">condition</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Diagnostics.Logging.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Logs an Error level message if condition is not true.
            </summary>
            <param name="condition">condition</param>
            <param name="format">format string</param>
            <param name="args">arguments</param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Diagnostics.Logging.LogLevel">
            <summary>
            Gets and sets logging level.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.ThreadLocalBufferPools`1">
            <summary>
            Thread-local buffer pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.ThreadLocalBufferPools`1.pool">
            <summary>
            A buffer pool
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.ThreadLocalMessageBufferPools`1">
            <summary>
            Thread-local buffer pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.ThreadLocalMessageBufferPools`1.pool">
            <summary>
            A buffer pool
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.AllocationReason">
            <summary>
            Enumeration tagging the reason for a byte buffer allocation
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.AllocationReason.Deserializer">
            <summary>
            Allocation is used in deserialization
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.AllocationReason.VertexOutputBuffer">
            <summary>
            Allocation is used in an output buffer for serialization
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.AllocationReason.PostOfficeChannel">
            <summary>
            Allocation is used in a post office channel send
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.AllocationReason.PostOfficeRentrancy">
            <summary>
            Allocation is used to break a re-entrancy cycle
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.ObjectSize.ManagedSize(System.Type)">
            <summary>
            Dynamically determines the size in bytes of a generic type struct
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.LockedBufferPool`1">
            <summary>
            Pool with locks for concurrent access.
            </summary>
            <typeparam name="T">Type of buffers in pool</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Scheduling.Scheduler.InternalStart">
            <summary>
            Starts the ThreadScheduler into an infinite scheduling loop.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Scheduling.Scheduler.#ctor(System.String,System.Int32,Microsoft.Research.Naiad.InternalController)">
            <summary>
            Creates a new thread scheduler
            </summary>
            <param name="n">The friendly name of this scheduler</param>
            <param name="i">The id of the core this thread is affinitized to</param>
            <param name="c">The internal controller reference</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.PairExtensionMethods">
            <summary>
            Extension methods for the Pair type
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.PairExtensionMethods.PairWith``2(``0,``1)">
            <summary>
            Returns a new Pair of two elements
            </summary>
            <typeparam name="V1">first element type</typeparam>
            <typeparam name="V2">second element type</typeparam>
            <param name="first">first element</param>
            <param name="second">second element</param>
            <returns>pair of first and second elements</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Pair`2">
            <summary>
            Pair of two elements
            </summary>
            <typeparam name="TFirst">The first element type.</typeparam>
            <typeparam name="TSecond">The second element type.</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Pair`2.First">
            <summary>
            First element.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Pair`2.Second">
            <summary>
            Second element.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructs a pair from two elements
            </summary>
            <param name="first">The first element.</param>
            <param name="second">The second element.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Pair`2.ToString">
            <summary>
            Returns a string representation of this pair.
            </summary>
            <returns>A string representation of this pair.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Pair`2.GetHashCode">
            <summary>
            Returns a 32-bit signed integer hashcode for this pair.
            </summary>
            <returns>A 32-bit signed integer hashcode for this pair.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Pair`2.Equals(Microsoft.Research.Naiad.Pair{`0,`1})">
            <summary>
            Compares this pair and the <paramref name="other"/> pair for element-wise equality.
            </summary>
            <param name="other">The other pair.</param>
            <returns><c>true</c>, if and only if both pairs are element-wise equal.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp">
            <summary>
            Represents a combined dataflow graph location and timestamp,
            for use in progress tracking.
            </summary>
            <seealso cref="E:Microsoft.Research.Naiad.Computation.OnFrontierChange"/>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.Location">
            <summary>
            Dataflow graph location
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.GetHashCode">
            <summary>
            Returns a hashcode for this pointstamp.
            </summary>
            <returns>A hashcode for this pointstamp.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.ToString">
            <summary>
            Returns a string representation of this pointstamp.
            </summary>
            <returns>A string representation of this pointstamp.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.Equals(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp)">
            <summary>
            Returns <c>true</c> if and only if this and the other pointstamps are equal.
            </summary>
            <param name="other">The other pointstamp.</param>
            <returns><c>true</c> if and only if this and the other pointstamps are equal.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.#ctor(Microsoft.Research.Naiad.Runtime.Progress.Pointstamp)">
            <summary>
            Constructs a Pointstamp copying from another
            </summary>
            <param name="that"></param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.#ctor(System.Int32,System.Int32[])">
            <summary>
            Constructs a new pointstamp from a location and int array
            </summary>
            <param name="location">dataflow graph location</param>
            <param name="indices">timestamp indices</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray">
            <summary>
            A fake array implementation to avoid heap allocation
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.a">
            <summary>
            first coordinate
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.b">
            <summary>
            second coordinate
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.c">
            <summary>
            third coordinate
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.d">
            <summary>
            fourth coordinate
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.Length">
            <summary>
            "length" of array
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.spillover">
            <summary>
            space for anything beyond four coordinates
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.#ctor(System.Int32)">
            <summary>
            Constructs a FakeArray with the specified size.
            </summary>
            <param name="size">The size of this FakeArray.</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.ToString">
            <summary>
            Returns a string representation of this array.
            </summary>
            <returns>A string representation of this array.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Runtime.Progress.Pointstamp.FakeArray.Item(System.Int32)">
            <summary>
            Returns the value at the given <paramref name="index"/>.
            </summary>
            <param name="index">The index.</param>
            <returns>The value at the given <paramref name="index"/>.</returns>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Message`2">
            <summary>
            A message containing typed records all with a common time
            </summary>
            <typeparam name="TRecord">record type</typeparam>
            <typeparam name="TTime">time type</typeparam>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Message`2.payload">
            <summary>
            Payload of typed records
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Message`2.length">
            <summary>
            Number of valid typed records
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Message`2.time">
            <summary>
            Time common to all records
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Message`2.Allocate(Microsoft.Research.Naiad.AllocationReason)">
            <summary>
            Causes an unallocated message to point at empty valid data
            </summary>
            <param name="tag">indication of why the allocation was done, for tracing reasons</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Message`2.Release(Microsoft.Research.Naiad.AllocationReason)">
            <summary>
            Releases the memory held by an allocated message back to a pool. Only call when no other references to the message are held.
            </summary>
            <param name="tag">indication of why the release was done, for tracing reasons</param>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Message`2.#ctor(`1)">
            <summary>
            Constructs an unallocated message for a specified time
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Message`2.Unallocated">
            <summary>
            Tests whether the message points at valid data or not
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Utilities.DependencyLister.Dependencies(System.Reflection.Assembly)">
            <summary>
            Returns the non-framework assemblies on which a given assembly depends.
            </summary>
            <param name="source">The initial assembly</param>
            <returns>A set of non-framework assemblies on which the given assembly depends</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Utilities.DependencyLister.ListDependencies(System.String)">
            <summary>
            Returns the locations of non-framework assemblies on which the assembly with the given filename depends.
            </summary>
            <param name="assemblyFilename">The filename of the assembly</param>
            <returns>An array of filenames for non-framework assemblies on which the given assembly depends</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Utilities.PinnedThread.QueryThreadCycles">
            <summary>
            Gets the current thread cycle count by calling QueryThreadCycleTime
            </summary>
            <returns>Number of CPU frontier cycles</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Utilities.PinnedThread.#ctor(System.Int32,System.Boolean)">
            <summary>
            Affinitizes the current runtime thread to the OS thread and the OS thread to the specified processor
            </summary>
            <param name="cpu">Processor number</param>
            <param name="soft">if true use soft affinity</param>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Stage">
            <summary>
            Represents an abstract stage in a dataflow graph, which comprises one or more dataflow vertices that each
            handle a partition of the data received by the stage.
            </summary>
            <remarks>
            This class cannot be instantiated directly: instead use the <see cref="M:Microsoft.Research.Naiad.Dataflow.Stage`2.#ctor(Microsoft.Research.Naiad.Dataflow.TimeContext{`1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1},`0},System.String)"/> constructor, or
            the static factory and extension methods in <see cref="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Stage.StageId">
            <summary>
            the unique identifier associated with the stage
            </summary>
        </member>
        <member name="F:Microsoft.Research.Naiad.Dataflow.Stage.Placement">
            <summary>
            the placement used for the stage
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage.NewInput``2(Microsoft.Research.Naiad.Stream{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Creates a new input for this stage, with the given <paramref name="partitioning"/> requirement.
            </summary>
            <typeparam name="TRecord">The record type.</typeparam>
            <typeparam name="TTime">The time type.</typeparam>
            <param name="stream">The stream from which this input will receive records.</param>
            <param name="partitioning">Function that maps records to integers, implying the requirement that all records
            mapping to the same integer must be processed by the same <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>.</param>
            <returns>An object that represents the stage input.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage.NewInput``2(Microsoft.Research.Naiad.Stream{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Action{``0[],System.Int32[],System.Int32})">
            <summary>
            Creates a new input for this stage, with the given <paramref name="partitioning"/> requirement.
            </summary>
            <typeparam name="TRecord">The record type.</typeparam>
            <typeparam name="TTime">The time type.</typeparam>
            <param name="stream">The stream from which this input will receive records.</param>
            <param name="partitioning">Function that maps records to integers, implying the requirement that all records
            mapping to the same integer must be processed by the same <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>.</param>
            <param name="vectoredPartitioning">Action that maps an array of records to an array of integers, implying the requirement that all records
            mapping to the same integer must be processed by the same <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>. The third argument is the number of valid records in the input array</param>
            <returns>An object that represents the stage input.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage.ToString">
            <summary>
            Returns the stage name decorated with the stage ID.
            </summary>
            <returns>The stage name decorated with the stage ID.</returns>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Stage.Computation">
            <summary>
            the graph manager associated with the stage
            </summary>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Stage.Name">
            <summary>
            Returns the stage name undecorated by stage id
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Stage`1">
            <summary>
            Represents an abstract stage in a dataflow graph, which comprises one or more dataflow vertices that each
            handle a partition of the data received by the stage, with a time type that
            indicates its level of nesting in the graph.
            </summary>
            <remarks>
            This class cannot be instantiated directly: instead use the <see cref="M:Microsoft.Research.Naiad.Dataflow.Stage`2.#ctor(Microsoft.Research.Naiad.Dataflow.TimeContext{`1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1},`0},System.String)"/> constructor, or
            the static factory and extension methods in <see cref="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry"/>.
            </remarks>
            <typeparam name="TTime">The type of timestamps on messages that this stage processes.</typeparam>
        </member>
        <member name="P:Microsoft.Research.Naiad.Dataflow.Stage`1.Context">
            <summary>
            The time context (e.g. loop body) to which this stage belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Naiad.Dataflow.Stage`2">
            <summary>
            Represents a stage in a dataflow graph, which comprises one or more dataflow vertices of a particular type that each
            handle a partition of the data received by the stage.
            </summary>
            <remarks>
            This class can be instantiated directly using the <see cref="M:Microsoft.Research.Naiad.Dataflow.Stage`2.#ctor(Microsoft.Research.Naiad.Dataflow.TimeContext{`1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1},`0},System.String)"/> constructor, or indirectly
            using the static factory and extension methods in <see cref="T:Microsoft.Research.Naiad.Dataflow.StandardVertices.Foundry"/>.
            </remarks>
            <typeparam name="TVertex">The type of dataflow vertices in this stage.</typeparam>
            <typeparam name="TTime">The type of timestamps on messages that this stage processes.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.#ctor(Microsoft.Research.Naiad.Dataflow.TimeContext{`1},System.Func{System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`1},`0},System.String)">
            <summary>
            Constructs a new stage in the given time context, using the given vertex factory to construct the constituent vertices.
            </summary>
            <param name="context">The time context.</param>
            <param name="factory">A factory for vertices in this stage.</param>
            <param name="name">A human-readable name for this stage.</param>
            <example>
            To use this constructor, the programmer must pass a vertex factory, which is a function from an integer ID and stage to the vertex type (TVertex). The factory
            arguments must be passed through to the <see cref="M:Microsoft.Research.Naiad.Dataflow.Vertex`1.#ctor(System.Int32,Microsoft.Research.Naiad.Dataflow.Stage{`0})"/> constructor. For example:
            <code>
            class MyVertex : Vertex&lt;TTime&gt; where TTime : Time&lt;TTime&gt;
            {
                public MyVertex(int id, Stage&lt;TTime&gt; stage, ...)
                    : base(id, stage)
                {
                    /* Other initialization. */
                }
            }
            
            var stage = new Stage&lt;TTime, MyVertex&gt;(context, (i, s) =&gt; new MyVertex(i, s, ...), "MyStage");
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewInput``1(Microsoft.Research.Naiad.Stream{``0,`1},System.Func{`0,Microsoft.Research.Naiad.Dataflow.VertexInput{``0,`1}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Creates a new input from a stream, a VertexInput selector, and partitioning information.
            </summary>
            <typeparam name="TRecord">Record type</typeparam>
            <param name="stream">source stream</param>
            <param name="vertexInput">VertexInput selector</param>
            <param name="partitionedBy">partitioning expression, or null</param>
            <returns>StageInput</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewInput``1(Microsoft.Research.Naiad.Stream{``0,`1},System.Func{`0,Microsoft.Research.Naiad.Dataflow.VertexInput{``0,`1}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Action{``0[],System.Int32[],System.Int32})">
            <summary>
            Creates a new input from a stream, a VertexInput selector, and partitioning information.
            </summary>
            <typeparam name="TRecord">Record type</typeparam>
            <param name="stream">source stream</param>
            <param name="vertexInput">VertexInput selector</param>
            <param name="partitionedBy">partitioning expression, or null</param>
            <param name="vectoredPartitionedBy">Action that maps an array of records to an array of integers, or none, implying the requirement that all records
            mapping to the same integer must be processed by the same <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>. The third argument is the number of valid records in the input array</param>
            <returns>StageInput</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewInput``1(Microsoft.Research.Naiad.Stream{``0,`1},System.Action{Microsoft.Research.Naiad.Dataflow.Message{``0,`1},`0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Creates a new input that consumes records from the given stream, partitioned by the given partitioning function,
            and delivers them to a vertex through the given onReceive callback.
            </summary>
            <typeparam name="TRecord">Record type</typeparam>
            <param name="stream">The stream from which records will be consumed.</param>
            <param name="onReceive">A callback that will be invoked on a message and vertex when that message is to be delivered to that vertex.</param>
            <param name="partitionedBy">A partitioning expression, or <c>null</c> if the records need not be repartitioned.</param>
            <returns>A handle to the input.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewInput``1(Microsoft.Research.Naiad.Stream{``0,`1},System.Action{Microsoft.Research.Naiad.Dataflow.Message{``0,`1},`0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Action{``0[],System.Int32[],System.Int32})">
            <summary>
            Creates a new input that consumes records from the given stream, partitioned by the given partitioning function,
            and delivers them to a vertex through the given onReceive callback.
            </summary>
            <typeparam name="TRecord">Record type</typeparam>
            <param name="stream">The stream from which records will be consumed.</param>
            <param name="onReceive">A callback that will be invoked on a message and vertex when that message is to be delivered to that vertex.</param>
            <param name="partitionedBy">A partitioning expression, or <c>null</c> if the records need not be repartitioned.</param>
            <param name="vectoredPartitionedBy">Action that maps an array of records to an array of integers, or none, implying the requirement that all records
            mapping to the same integer must be processed by the same <see cref="T:Microsoft.Research.Naiad.Dataflow.Vertex"/>. The third argument is the number of valid records in the input array</param>
            <returns>A handle to the input.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewUnconnectedInput``1(System.Func{`0,Microsoft.Research.Naiad.Dataflow.VertexInput{``0,`1}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Ok, listen. This is used in very few places when we need to violate the "inputs before outputs" rule. We create the input anyhow, and assign the stream later on.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewOutput``1(System.Func{`0,Microsoft.Research.Naiad.Dataflow.VertexOutput{``0,`1}})">
            <summary>
            Creates a new output with no partitioning guarantee.
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="vertexOutput">A function that, given a vertex in this stage, returns the corresponding vertex-level output.</param>
            <returns>A handle to the output stream.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewOutput``1(System.Func{`0,Microsoft.Research.Naiad.Dataflow.VertexOutput{``0,`1}},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Creates a new output with a partitioning guarantee
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="vertexOutput">Given a vertex in this stage, returns the corresponding vertex-level output.</param>
            <param name="partitionedBy">A partitioning guarantee, or null if there is no known partitioning guarantee.</param>
            <returns>A handle to the output stream.</returns>
        </member>
        <member name="M:Microsoft.Research.Naiad.Dataflow.Stage`2.NewOutput``1(System.Action{Microsoft.Research.Naiad.Dataflow.SendChannel{``0,`1},`0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <summary>
            Adds an output with a partitioning guarantee
            </summary>
            <typeparam name="R">record type</typeparam>
            <param name="newListener">new listener callback</param>
            <param name="partitionedBy">partitoining guarantee</param>
            <returns>output stream</returns>
        </member>
    </members>
</doc>
